{
  parserClass="wgslplugin.language.parser.WgslParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="WGSL"
  psiImplClassSuffix="Impl"
  psiPackage="wgslplugin.language.psi"
  psiImplPackage="wgslplugin.language.psi.impl"

  elementTypeHolderClass="wgslplugin.language.psi.WGSLTypes"
  elementTypeClass="wgslplugin.language.psi.WGSLElementType"
  tokenTypeClass="wgslplugin.language.psi.WGSLTokenType"

  psiImplUtilClass="wgslplugin.language.psi.impl.WGSLPsiImplUtil"

  tokens = [
    LINE_COMMENT = 'LINE_COMMENT'
    BLOCK_COMMENT = 'BLOCK_COMMENT'
  ]
}

translation_unit ::=
      global_directive* global_decl*

const_literal ::=
      INT_LITERAL
    | UINT_LITERAL
    | float_literal
    | TRUE
    | FALSE

float_literal ::=
      DECIMAL_FLOAT_LITERAL
    | HEX_FLOAT_LITERAL

attribute_list ::= ATTR_LEFT ( attribute COMMA )* attribute ATTR_RIGHT
    | ( AT attribute )+

attribute ::=
      attribute_name PAREN_LEFT ( literal_or_ident COMMA )* literal_or_ident PAREN_RIGHT
    | attribute_name

attribute_name ::=
    IDENT {
                mixin="wgslplugin.language.psi.impl.WGSLAttributeElementImpl"
                implements="wgslplugin.language.psi.WGSLAttributeElement"
                methods=[getName setName getNameIdentifier]
          }

literal_or_ident ::=
      float_literal
    | INT_LITERAL
    | UINT_LITERAL
    | IDENT

global_directive ::=
     enable_directive

array_type_decl ::=
     attribute_list* ARRAY LESS_THAN type_decl ( COMMA element_count_expression )? GREATER_THAN

element_count_expression ::=
      INT_LITERAL
    | UINT_LITERAL
    | IDENT

struct_decl ::=
     attribute_list * STRUCT IDENT struct_body_decl

struct_body_decl ::=
      BRACE_LEFT struct_member* BRACE_RIGHT

struct_member ::=
      attribute_list* field COMMA

field ::= field_ident COLON type_decl

field_ident ::=
    IDENT {
      mixin="wgslplugin.language.psi.impl.WGSLStructFieldImpl"
      implements="wgslplugin.language.psi.WGSLStructFieldElement"
      methods=[getName setName getNameIdentifier]
    }

access_mode ::=
    IDENT
/*
      READ
    | WRITE
    | READ_WRITE
*/

storage_class ::=
      FUNCTION
    | PRIVATE
    | WORKGROUP
    | UNIFORM
    | STORAGE
    | PUSH_CONSTANT

texture_sampler_types ::=
      sampler_type
    | depth_texture_type
    | sampled_texture_type LESS_THAN type_decl GREATER_THAN
    | multisampled_texture_type LESS_THAN type_decl GREATER_THAN
    | storage_texture_type LESS_THAN texel_format COMMA access_mode GREATER_THAN

sampler_type ::=
      SAMPLER
    | SAMPLER_COMPARISON

sampled_texture_type ::=
      TEXTURE_1D
    | TEXTURE_2D
    | TEXTURE_2D_ARRAY
    | TEXTURE_3D
    | TEXTURE_CUBE
    | TEXTURE_CUBE_ARRAY

multisampled_texture_type ::=
      TEXTURE_MULTISAMPLED_2D

storage_texture_type ::=
      TEXTURE_STORAGE_1D
    | TEXTURE_STORAGE_2D
    | TEXTURE_STORAGE_2D_ARRAY
    | TEXTURE_STORAGE_3D

depth_texture_type ::=
      TEXTURE_DEPTH_2D
    | TEXTURE_DEPTH_2D_ARRAY
    | TEXTURE_DEPTH_CUBE
    | TEXTURE_DEPTH_CUBE_ARRAY
    | TEXTURE_DEPTH_MULTISAMPLED_2D

texel_format ::=
    IDENT
/*
      R8UNORM
    | R8SNORM
    | R8UINT
    | R8SINT
    | R16UINT
    | R16SINT
    | R16FLOAT
    | RG8UNORM
    | RG8SNORM
    | RG8UINT
    | RG8SINT
    | R32UINT
    | R32SINT
    | R32FLOAT
    | RG16UINT
    | RG16SINT
    | RG16FLOAT
    | RGBA8UNORM
    | RGBA8UNORM_SRGB
    | RGBA8SNORM
    | RGBA8UINT
    | RGBA8SINT
    | BGRA8UNORM
    | BGRA8UNORM_SRGB
    | RGB10A2UNORM
    | RG11B10FLOAT
    | RG32UINT
    | RG32SINT
    | RG32FLOAT
    | RGBA16UINT
    | RGBA16SINT
    | RGBA16FLOAT
    | RGBA32UINT
    | RGBA32SINT
    | RGBA32FLOAT
*/

type_alias_decl ::=
      TYPE IDENT EQUAL type_decl

type_decl ::=
      IDENT
    | BOOL
    | FLOAT32
    | INT32
    | UINT32
    | VEC2 LESS_THAN type_decl GREATER_THAN
    | VEC3 LESS_THAN type_decl GREATER_THAN
    | VEC4 LESS_THAN type_decl GREATER_THAN
    | POINTER LESS_THAN storage_class COMMA type_decl ( COMMA access_mode )? GREATER_THAN
    | array_type_decl
    | MAT2X2 LESS_THAN type_decl GREATER_THAN
    | MAT2X3 LESS_THAN type_decl GREATER_THAN
    | MAT2X4 LESS_THAN type_decl GREATER_THAN
    | MAT3X2 LESS_THAN type_decl GREATER_THAN
    | MAT3X3 LESS_THAN type_decl GREATER_THAN
    | MAT3X4 LESS_THAN type_decl GREATER_THAN
    | MAT4X2 LESS_THAN type_decl GREATER_THAN
    | MAT4X3 LESS_THAN type_decl GREATER_THAN
    | MAT4X4 LESS_THAN type_decl GREATER_THAN
    | ATOMIC LESS_THAN type_decl GREATER_THAN
    | texture_sampler_types

variable_statement ::=
      variable_decl (EQUAL expression)?
    | LET variable_ident_decl EQUAL expression

variable_decl ::=
      VAR variable_qualifier? variable_ident_decl

variable_ident_decl ::=
      IDENT (COLON type_decl)? {
          mixin="wgslplugin.language.psi.impl.WGSLNamedElementImpl"
          implements="wgslplugin.language.psi.WGSLNamedElement"
          methods=[getName setName getNameIdentifier]
      }

variable_qualifier ::=
     LESS_THAN storage_class ( COMMA access_mode )? GREATER_THAN

global_variable_decl ::=
     attribute_list* variable_decl ( EQUAL const_expression )?

global_constant_decl ::=
     attribute_list* LET variable_ident_decl global_const_initializer?

global_const_initializer ::=
     EQUAL const_expression

const_expression ::=
      type_decl PAREN_LEFT ( ( const_expression COMMA )* const_expression COMMA? )? PAREN_RIGHT
    | const_literal

primary_expression ::=
      func_call_statement
    | variable_reference
    | type_decl argument_expression_list
    | const_literal
    | paren_expression
    | BITCAST LESS_THAN type_decl GREATER_THAN paren_expression

variable_reference ::=
    IDENT {
            mixin="wgslplugin.language.psi.impl.WGSLReferenceElementImpl"
            implements="wgslplugin.language.psi.WGSLReferenceElement"
            methods=[getName setName]
          }

paren_expression ::=
      PAREN_LEFT expression PAREN_RIGHT

argument_expression_list ::=
      PAREN_LEFT ( ( expression COMMA )* expression COMMA? )? PAREN_RIGHT

postfix_expression ::=
      BRACKET_LEFT expression BRACKET_RIGHT postfix_expression?
    | PERIOD IDENT postfix_expression?

unary_expression ::=
      singular_expression
    | MINUS unary_expression
    | BANG unary_expression
    | TILDE unary_expression
    | STAR unary_expression
    | AND unary_expression

singular_expression ::=
      primary_expression postfix_expression?

lhs_expression ::=
      ( STAR | AND )* core_lhs_expression postfix_expression?

core_lhs_expression ::=
      variable_reference
    | PAREN_LEFT lhs_expression PAREN_RIGHT

expression ::=
      unary_expression ((STAR | FORWARD_SLASH | MODULO | PLUS | MINUS | SHIFT_LEFT | SHIFT_RIGHT | LESS_THAN | LESS_THAN_EQUAL | GREATER_THAN | GREATER_THAN_EQUAL | EQUAL_EQUAL | NOT_EQUAL | OR_OR | AND_AND | OR | AND | XOR) expression)?

compound_statement ::=
     BRACE_LEFT statement* BRACE_RIGHT

assignment_statement ::=
      ( lhs_expression | UNDERSCORE ) EQUAL expression

if_statement ::=
     IF paren_expression compound_statement ( ELSE else_statement )?

else_statement ::=
      compound_statement
    | if_statement

switch_statement ::=
      SWITCH paren_expression BRACE_LEFT switch_body+ BRACE_RIGHT

switch_body ::=
      CASE case_selectors COLON BRACE_LEFT case_body? BRACE_RIGHT
    | DEFAULT COLON BRACE_LEFT case_body? BRACE_RIGHT

case_selectors ::=
      const_literal ( COMMA const_literal )* COMMA?

case_body ::=
      statement case_body?
    | FALLTHROUGH SEMICOLON

loop_statement ::=
      LOOP BRACE_LEFT statement * continuing_statement ? BRACE_RIGHT

for_statement ::=
      FOR PAREN_LEFT for_header PAREN_RIGHT compound_statement

for_header ::=
    for_init ? SEMICOLON expression ? SEMICOLON for_update ?

for_init ::=
    variable_statement | assignment_statement | func_call_statement

for_update ::=
    increment_statement | decrement_statement | assignment_statement | func_call_statement

increment_statement ::=
    lhs_expression PLUS_PLUS

decrement_statement ::=
    lhs_expression MINUS_MINUS

break_statement ::=
      BREAK

continue_statement ::=
      CONTINUE

continuing_statement ::=
      CONTINUING compound_statement

return_statement ::=
      RETURN expression?

func_call_statement ::=
      func_call_name argument_expression_list

func_call_name ::=
    IDENT {
              mixin="wgslplugin.language.psi.impl.WGSLFunctionCallElementImpl"
              implements="wgslplugin.language.psi.WGSLFunctionCallElement"
              methods=[getName setName]
          }

statement ::=
      SEMICOLON
    | return_statement SEMICOLON
    | if_statement
    | switch_statement
    | loop_statement
    | for_statement
    | func_call_statement SEMICOLON
    | variable_statement SEMICOLON
    | break_statement SEMICOLON
    | continue_statement SEMICOLON
    | DISCARD SEMICOLON
    | assignment_statement SEMICOLON
    | compound_statement
    | increment_statement SEMICOLON
    | decrement_statement SEMICOLON

docs ::=
    DOC_COMMENT

function_decl ::=
      docs? attribute_list? function_header compound_statement

function_header ::=
      FN function_name PAREN_LEFT param_list? PAREN_RIGHT ( ARROW attribute_list* type_decl )?

function_name ::=
    IDENT {
            mixin="wgslplugin.language.psi.impl.WGSLFunctionElementImpl"
            implements="wgslplugin.language.psi.WGSLFunctionElement"
            methods=[getName setName getNameIdentifier]
          }

param_list ::=
      param (COMMA param)* COMMA?

param ::=
      attribute_list? variable_ident_decl

enable_directive ::=
      ENABLE IDENT SEMICOLON

global_decl ::=
      SEMICOLON
    | global_variable_decl SEMICOLON
    | global_constant_decl SEMICOLON
    | type_alias_decl SEMICOLON
    | struct_decl SEMICOLON
    | function_decl

