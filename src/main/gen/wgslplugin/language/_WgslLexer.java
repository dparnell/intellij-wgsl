// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: WGSLLexer.flex

package wgslplugin.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static wgslplugin.language.psi.WGSLTypes.*;


public class _WgslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ARRAY_SPEC = 2;
  public static final int TYPE_SPEC = 4;
  public static final int BIND_SPEC = 6;
  public static final int ATTRIBUTE = 8;
  public static final int PREPROCESSOR = 10;
  public static final int PREPROCESSOR_NESTED = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\0\1\5\1\0\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\25\1\27\1\25"+
    "\1\30\1\31\1\32\1\33\1\34\1\0\1\35\1\36"+
    "\3\37\1\40\1\37\11\41\1\42\12\41\1\43\1\0"+
    "\1\44\1\45\1\46\1\0\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\60\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\60\1\77\1\100"+
    "\1\101\1\102\6\0\1\3\32\0\1\1\u01df\0\1\1"+
    "\177\0\13\1\35\0\2\3\5\0\1\1\57\0\1\1"+
    "\240\0\1\1\377\0\u0100\103";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\2\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\22\32\1\33\1\34\1\35\1\36\2\2"+
    "\1\1\1\37\1\40\2\1\2\16\1\41\1\42\1\43"+
    "\1\44\16\32\3\1\2\32\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\2\0\1\16\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\2\0\1\70\1\0\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\15\32\1\100\2\32\1\101\20\32"+
    "\1\102\1\103\2\0\1\47\1\0\1\16\1\0\16\32"+
    "\1\104\1\32\1\0\1\64\1\65\1\105\1\0\1\64"+
    "\1\0\1\16\1\106\1\107\14\32\1\110\1\32\1\111"+
    "\1\112\1\113\3\32\1\114\10\32\1\115\1\116\2\32"+
    "\1\0\1\16\23\32\1\16\2\0\1\117\1\0\4\32"+
    "\1\120\1\32\1\121\4\32\1\122\3\32\1\123\12\32"+
    "\1\124\1\125\1\126\1\127\1\130\1\32\1\16\17\32"+
    "\1\131\13\32\1\65\1\105\1\0\1\117\1\132\3\32"+
    "\1\133\1\134\5\32\1\135\12\32\1\136\1\137\1\140"+
    "\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150"+
    "\1\151\1\152\1\153\41\32\1\154\1\117\1\155\5\32"+
    "\1\156\1\32\1\157\1\160\1\161\1\162\1\163\1\164"+
    "\1\165\1\166\1\167\1\32\1\170\2\32\1\171\1\172"+
    "\13\32\1\173\1\32\1\174\26\32\1\175\1\32\1\176"+
    "\1\177\1\32\1\200\1\201\1\202\1\203\1\204\1\205"+
    "\1\206\1\207\1\210\1\211\1\212\1\213\1\214\1\215"+
    "\1\216\1\217\1\220\1\221\1\32\1\222\4\32\1\223"+
    "\2\32\1\224\1\225\1\32\1\226\1\227\1\230\1\231"+
    "\10\32\1\232\1\32\1\233\14\32\1\234\1\235\2\32"+
    "\1\236\2\32\1\237\4\32\1\240\1\32\1\241\1\242"+
    "\3\32\1\243\1\244\1\32\1\245\1\246\1\247\1\250"+
    "\34\32\1\251\1\252\7\32\1\253\1\32\1\254\1\32"+
    "\1\255\1\32\1\256\3\32\1\257\1\260\1\261\4\32"+
    "\1\262\1\32\1\263\3\32\1\264\1\265\1\32\1\266"+
    "\1\267\1\270\1\271\1\32\1\272\13\32\1\273\1\274"+
    "\3\32\1\275\1\32\1\276\5\32\1\277\1\300\1\32"+
    "\1\301\7\32\1\302\21\32\1\303\1\304\1\32\1\305"+
    "\1\32\1\306\15\32\1\307\1\310\1\32\1\311\2\32"+
    "\1\312\1\313\1\314\17\32\1\315\6\32\1\316\1\32"+
    "\1\317\1\32\1\320\4\32\1\321";

  private static int [] zzUnpackAction() {
    int [] result = new int[712];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u0220\0\u0220"+
    "\0\u03b8\0\u03fc\0\u0220\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550"+
    "\0\u0220\0\u0220\0\u0594\0\u05d8\0\u061c\0\u0220\0\u0660\0\u06a4"+
    "\0\u0220\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880"+
    "\0\u08c4\0\u072c\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c"+
    "\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0220\0\u0bf4\0\u0220"+
    "\0\u0220\0\u0c38\0\u0c7c\0\u0cc0\0\u0220\0\u0220\0\u0d04\0\u0d48"+
    "\0\u0d8c\0\u0dd0\0\u0220\0\u0220\0\u0220\0\u0220\0\u0e14\0\u0e58"+
    "\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078"+
    "\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u0484\0\u1210\0\u1254"+
    "\0\u1298\0\u12dc\0\u1320\0\u12dc\0\u12dc\0\u12dc\0\u0220\0\u0220"+
    "\0\u0220\0\u0220\0\u0220\0\u0220\0\u0220\0\u0220\0\u0484\0\u1364"+
    "\0\u13a8\0\u0220\0\u0220\0\u13ec\0\u1430\0\u1474\0\u0220\0\u14b8"+
    "\0\u14fc\0\u0220\0\u1540\0\u1584\0\u0220\0\u0220\0\u0220\0\u15c8"+
    "\0\u0220\0\u0220\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760"+
    "\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u072c"+
    "\0\u1980\0\u19c4\0\u072c\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18"+
    "\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38"+
    "\0\u1d7c\0\u1dc0\0\u1e04\0\u0220\0\u0220\0\u1e48\0\u0cc0\0\u0cc0"+
    "\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068"+
    "\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288"+
    "\0\u22cc\0\u0220\0\u2310\0\u2354\0\u0220\0\u2398\0\u23dc\0\u2420"+
    "\0\u2464\0\u24a8\0\u24ec\0\u0220\0\u0220\0\u2530\0\u2574\0\u25b8"+
    "\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8"+
    "\0\u281c\0\u072c\0\u2860\0\u072c\0\u072c\0\u072c\0\u28a4\0\u28e8"+
    "\0\u292c\0\u072c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4"+
    "\0\u2b08\0\u2b4c\0\u072c\0\u072c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c"+
    "\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c"+
    "\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c"+
    "\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc"+
    "\0\u3300\0\u3344\0\u3388\0\u33cc\0\u072c\0\u3410\0\u072c\0\u3454"+
    "\0\u3498\0\u34dc\0\u3520\0\u072c\0\u3564\0\u35a8\0\u35ec\0\u072c"+
    "\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c"+
    "\0\u3850\0\u3894\0\u072c\0\u072c\0\u38d8\0\u391c\0\u3960\0\u39a4"+
    "\0\u2c18\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80"+
    "\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0"+
    "\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0"+
    "\0\u4004\0\u4048\0\u408c\0\u40d0\0\u0220\0\u0220\0\u4114\0\u4158"+
    "\0\u072c\0\u419c\0\u41e0\0\u4224\0\u072c\0\u072c\0\u4268\0\u42ac"+
    "\0\u42f0\0\u4334\0\u4378\0\u072c\0\u43bc\0\u4400\0\u4444\0\u4488"+
    "\0\u44cc\0\u4510\0\u4554\0\u4598\0\u45dc\0\u4620\0\u072c\0\u072c"+
    "\0\u072c\0\u072c\0\u072c\0\u072c\0\u072c\0\u072c\0\u072c\0\u072c"+
    "\0\u072c\0\u072c\0\u072c\0\u072c\0\u4664\0\u46a8\0\u46ec\0\u4730"+
    "\0\u4774\0\u47b8\0\u47fc\0\u4840\0\u4884\0\u48c8\0\u490c\0\u4950"+
    "\0\u4994\0\u49d8\0\u4a1c\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70"+
    "\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08\0\u4d4c\0\u4d90"+
    "\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0\0\u4ee4\0\u072c\0\u0220\0\u072c"+
    "\0\u4f28\0\u4f6c\0\u4fb0\0\u4ff4\0\u5038\0\u072c\0\u507c\0\u50c0"+
    "\0\u5104\0\u5148\0\u518c\0\u51d0\0\u5214\0\u5258\0\u529c\0\u52e0"+
    "\0\u5324\0\u072c\0\u5368\0\u53ac\0\u072c\0\u072c\0\u53f0\0\u5434"+
    "\0\u5478\0\u54bc\0\u5500\0\u5544\0\u5588\0\u55cc\0\u5610\0\u5654"+
    "\0\u5698\0\u072c\0\u56dc\0\u072c\0\u5720\0\u5764\0\u57a8\0\u57ec"+
    "\0\u5830\0\u5874\0\u58b8\0\u58fc\0\u5940\0\u5984\0\u59c8\0\u5a0c"+
    "\0\u5a50\0\u5a94\0\u5ad8\0\u5b1c\0\u5b60\0\u5ba4\0\u5be8\0\u5c2c"+
    "\0\u5c70\0\u5cb4\0\u072c\0\u5cf8\0\u072c\0\u072c\0\u5d3c\0\u072c"+
    "\0\u072c\0\u072c\0\u072c\0\u072c\0\u072c\0\u072c\0\u072c\0\u072c"+
    "\0\u072c\0\u072c\0\u072c\0\u072c\0\u072c\0\u072c\0\u072c\0\u072c"+
    "\0\u072c\0\u5d80\0\u5dc4\0\u5e08\0\u5e4c\0\u5e90\0\u5ed4\0\u072c"+
    "\0\u5f18\0\u5f5c\0\u072c\0\u072c\0\u5fa0\0\u072c\0\u072c\0\u072c"+
    "\0\u072c\0\u5fe4\0\u6028\0\u606c\0\u60b0\0\u60f4\0\u6138\0\u617c"+
    "\0\u61c0\0\u072c\0\u6204\0\u072c\0\u6248\0\u628c\0\u62d0\0\u6314"+
    "\0\u6358\0\u639c\0\u63e0\0\u6424\0\u6468\0\u64ac\0\u64f0\0\u6534"+
    "\0\u072c\0\u072c\0\u6578\0\u65bc\0\u072c\0\u6600\0\u6644\0\u072c"+
    "\0\u6688\0\u66cc\0\u6710\0\u6754\0\u072c\0\u6798\0\u072c\0\u072c"+
    "\0\u67dc\0\u6820\0\u6864\0\u072c\0\u072c\0\u68a8\0\u072c\0\u072c"+
    "\0\u072c\0\u072c\0\u68ec\0\u6930\0\u6974\0\u69b8\0\u69fc\0\u6a40"+
    "\0\u6a84\0\u6ac8\0\u6b0c\0\u6b50\0\u6b94\0\u6bd8\0\u6c1c\0\u6c60"+
    "\0\u6ca4\0\u6ce8\0\u6d2c\0\u6d70\0\u6db4\0\u6df8\0\u6e3c\0\u6e80"+
    "\0\u6ec4\0\u6f08\0\u6f4c\0\u6f90\0\u6fd4\0\u7018\0\u072c\0\u072c"+
    "\0\u705c\0\u70a0\0\u70e4\0\u7128\0\u716c\0\u71b0\0\u71f4\0\u072c"+
    "\0\u7238\0\u072c\0\u727c\0\u072c\0\u72c0\0\u072c\0\u7304\0\u7348"+
    "\0\u738c\0\u072c\0\u73d0\0\u072c\0\u7414\0\u7458\0\u749c\0\u74e0"+
    "\0\u7524\0\u7568\0\u072c\0\u75ac\0\u75f0\0\u7634\0\u072c\0\u072c"+
    "\0\u7678\0\u072c\0\u072c\0\u072c\0\u76bc\0\u7700\0\u072c\0\u7744"+
    "\0\u7788\0\u77cc\0\u7810\0\u7854\0\u7898\0\u78dc\0\u7920\0\u7964"+
    "\0\u79a8\0\u79ec\0\u072c\0\u072c\0\u7a30\0\u7a74\0\u7ab8\0\u072c"+
    "\0\u7afc\0\u7b40\0\u7b84\0\u7bc8\0\u7c0c\0\u7c50\0\u7c94\0\u072c"+
    "\0\u072c\0\u7cd8\0\u072c\0\u7d1c\0\u7d60\0\u7da4\0\u7de8\0\u7e2c"+
    "\0\u7e70\0\u7eb4\0\u072c\0\u7ef8\0\u7f3c\0\u7f80\0\u7fc4\0\u8008"+
    "\0\u804c\0\u8090\0\u80d4\0\u8118\0\u815c\0\u81a0\0\u81e4\0\u8228"+
    "\0\u826c\0\u82b0\0\u82f4\0\u8338\0\u072c\0\u072c\0\u837c\0\u072c"+
    "\0\u83c0\0\u8404\0\u8448\0\u848c\0\u84d0\0\u8514\0\u8558\0\u859c"+
    "\0\u85e0\0\u8624\0\u8668\0\u86ac\0\u86f0\0\u8734\0\u8778\0\u072c"+
    "\0\u072c\0\u87bc\0\u8800\0\u8844\0\u8888\0\u072c\0\u88cc\0\u072c"+
    "\0\u8910\0\u8954\0\u8998\0\u89dc\0\u8a20\0\u8a64\0\u8aa8\0\u8aec"+
    "\0\u8b30\0\u8b74\0\u8bb8\0\u8bfc\0\u8c40\0\u8c84\0\u8cc8\0\u072c"+
    "\0\u8d0c\0\u8d50\0\u8d94\0\u8dd8\0\u8e1c\0\u8e60\0\u072c\0\u8ea4"+
    "\0\u072c\0\u8ee8\0\u072c\0\u8f2c\0\u8f70\0\u8fb4\0\u8ff8\0\u072c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[712];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\12\1\14\1\11\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\7\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\5\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\2\52\1\53\2\52\1\54\1\55"+
    "\1\52\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\2\52\1\66\1\67\1\70\1\71\2\11\1\72"+
    "\1\73\1\72\1\14\1\74\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\7\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\5\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\2\52\1\53\2\52\1\54\1\55\1\52\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\2\52"+
    "\1\66\1\67\1\70\1\71\11\11\1\75\21\11\1\76"+
    "\52\11\1\12\1\13\1\12\4\11\1\75\3\11\1\23"+
    "\1\77\1\11\1\100\1\101\7\102\1\103\1\11\1\104"+
    "\1\105\1\106\1\11\5\37\3\11\1\52\1\107\1\110"+
    "\3\52\1\111\2\52\1\112\3\52\1\55\2\52\1\113"+
    "\1\114\1\115\1\52\1\116\1\117\1\120\2\52\6\11"+
    "\1\12\1\13\1\12\10\11\1\23\1\77\1\11\1\100"+
    "\1\101\7\102\2\11\1\104\1\11\1\106\1\11\5\37"+
    "\3\11\1\52\1\121\1\122\3\52\1\123\2\52\1\112"+
    "\3\52\1\55\2\52\1\57\2\52\1\124\1\63\1\117"+
    "\3\52\6\11\1\12\1\13\1\12\4\11\1\17\1\20"+
    "\2\11\1\23\1\125\1\126\1\100\1\27\7\30\6\11"+
    "\5\37\1\11\1\127\1\11\6\52\1\130\14\52\1\131"+
    "\5\52\5\11\2\132\1\133\1\11\37\132\1\134\1\135"+
    "\32\132\1\136\1\132\1\135\1\132\1\11\2\132\1\13"+
    "\1\11\37\132\1\134\1\135\32\132\1\136\1\132\1\135"+
    "\1\132\1\11\105\0\1\12\1\0\1\12\102\0\1\13"+
    "\134\0\1\137\103\0\1\140\57\0\1\141\23\0\1\142"+
    "\103\0\1\143\63\0\1\144\17\0\1\145\65\0\1\146"+
    "\1\147\1\0\1\150\7\151\3\0\1\152\1\153\67\0"+
    "\10\154\66\0\1\155\4\0\1\156\13\0\1\157\66\0"+
    "\1\154\1\0\10\160\10\0\1\161\12\0\1\161\16\0"+
    "\1\162\2\0\1\163\24\0\1\154\1\0\10\30\10\0"+
    "\1\161\12\0\1\161\16\0\1\162\43\0\1\164\1\165"+
    "\103\0\1\166\103\0\1\167\1\170\67\0\10\52\6\0"+
    "\5\37\3\0\31\52\50\0\1\171\73\0\1\172\70\0"+
    "\10\52\6\0\5\52\3\0\31\52\25\0\10\52\6\0"+
    "\5\52\3\0\21\52\1\173\1\52\1\174\5\52\25\0"+
    "\10\52\6\0\5\52\3\0\11\52\1\175\5\52\1\176"+
    "\1\52\1\177\7\52\25\0\10\52\6\0\5\52\3\0"+
    "\1\52\1\200\15\52\1\201\11\52\25\0\10\52\6\0"+
    "\5\52\3\0\5\52\1\202\3\52\1\203\17\52\25\0"+
    "\10\52\6\0\5\52\3\0\14\52\1\204\1\52\1\205"+
    "\12\52\25\0\3\52\1\206\4\52\6\0\5\52\3\0"+
    "\1\52\1\207\14\52\1\210\1\211\11\52\25\0\3\52"+
    "\1\212\4\52\6\0\5\52\3\0\6\52\1\213\22\52"+
    "\25\0\10\52\6\0\5\52\3\0\5\52\1\214\11\52"+
    "\1\215\11\52\25\0\10\52\6\0\5\52\3\0\1\52"+
    "\1\216\27\52\25\0\10\52\6\0\5\52\3\0\25\52"+
    "\1\217\3\52\25\0\10\52\6\0\5\52\3\0\23\52"+
    "\1\220\5\52\25\0\10\52\6\0\5\52\3\0\5\52"+
    "\1\221\23\52\25\0\10\52\6\0\5\52\3\0\1\52"+
    "\1\222\21\52\1\223\2\52\1\224\2\52\25\0\10\52"+
    "\6\0\5\52\3\0\5\52\1\225\13\52\1\226\6\52"+
    "\1\227\25\0\3\52\1\230\4\52\6\0\5\52\3\0"+
    "\31\52\25\0\10\52\6\0\5\52\3\0\1\52\1\231"+
    "\3\52\1\232\23\52\25\0\10\52\6\0\5\52\3\0"+
    "\10\52\1\233\20\52\40\0\1\234\44\0\1\235\4\0"+
    "\1\72\1\236\1\72\1\0\1\237\77\0\1\236\1\73"+
    "\1\236\1\0\1\237\76\0\2\240\1\0\40\240\1\0"+
    "\33\240\1\0\4\240\20\0\1\241\7\242\66\0\1\155"+
    "\4\0\1\156\156\0\1\162\2\0\1\243\26\0\10\102"+
    "\42\0\1\162\31\0\10\52\6\0\5\52\3\0\21\52"+
    "\1\244\1\52\1\174\5\52\25\0\10\52\6\0\5\52"+
    "\3\0\7\52\1\245\7\52\1\176\11\52\25\0\3\52"+
    "\1\206\4\52\6\0\5\52\3\0\24\52\1\246\4\52"+
    "\25\0\3\52\1\212\4\52\6\0\5\52\3\0\31\52"+
    "\25\0\10\52\6\0\5\52\3\0\21\52\1\247\1\52"+
    "\1\220\1\250\4\52\25\0\1\52\1\251\1\52\1\252"+
    "\3\52\1\253\6\0\5\52\3\0\5\52\1\254\1\52"+
    "\1\255\21\52\25\0\10\52\6\0\5\52\3\0\23\52"+
    "\1\256\5\52\25\0\3\52\1\230\4\52\6\0\5\52"+
    "\3\0\16\52\1\257\12\52\25\0\10\52\6\0\5\52"+
    "\3\0\5\52\1\232\23\52\25\0\10\52\6\0\5\52"+
    "\3\0\17\52\1\260\1\52\1\261\7\52\25\0\10\52"+
    "\6\0\5\52\3\0\23\52\1\174\5\52\25\0\10\52"+
    "\6\0\5\52\3\0\17\52\1\176\11\52\25\0\3\52"+
    "\1\206\4\52\6\0\5\52\3\0\31\52\25\0\10\52"+
    "\6\0\5\52\3\0\5\52\1\225\23\52\23\0\1\147"+
    "\1\0\1\150\7\151\120\0\1\262\57\0\10\52\6\0"+
    "\5\52\3\0\1\52\1\263\27\52\25\0\10\52\6\0"+
    "\5\52\3\0\21\52\1\226\7\52\5\0\2\132\2\0"+
    "\77\132\3\0\1\133\117\0\1\154\1\0\10\160\10\0"+
    "\1\161\12\0\1\161\21\0\1\264\24\0\1\154\1\0"+
    "\10\151\10\0\1\161\12\0\1\161\50\0\10\154\10\0"+
    "\1\161\12\0\1\161\1\265\27\0\12\266\1\267\71\266"+
    "\2\156\1\0\101\156\16\0\1\154\1\0\10\160\10\0"+
    "\1\161\12\0\1\161\43\0\1\270\1\0\1\270\2\0"+
    "\10\271\72\0\1\272\1\0\10\273\6\0\3\273\6\0"+
    "\6\273\62\0\1\274\103\0\1\275\70\0\10\52\6\0"+
    "\5\52\3\0\21\52\1\276\7\52\25\0\10\52\6\0"+
    "\5\52\3\0\17\52\1\277\11\52\25\0\10\52\6\0"+
    "\5\52\3\0\16\52\1\300\4\52\1\301\5\52\25\0"+
    "\10\52\6\0\5\52\3\0\17\52\1\302\11\52\25\0"+
    "\10\52\6\0\5\52\3\0\5\52\1\303\23\52\25\0"+
    "\10\52\6\0\5\52\3\0\22\52\1\304\6\52\25\0"+
    "\10\52\6\0\5\52\3\0\16\52\1\305\12\52\25\0"+
    "\10\52\6\0\5\52\3\0\6\52\1\306\22\52\25\0"+
    "\10\52\6\0\5\52\3\0\22\52\1\307\6\52\25\0"+
    "\10\52\6\0\5\52\3\0\22\52\1\310\6\52\25\0"+
    "\10\52\6\0\5\52\3\0\1\52\1\311\27\52\25\0"+
    "\2\52\1\312\5\52\6\0\5\52\3\0\31\52\25\0"+
    "\10\52\6\0\5\52\3\0\14\52\1\313\14\52\25\0"+
    "\10\52\6\0\5\52\3\0\21\52\1\314\7\52\25\0"+
    "\2\52\1\315\5\52\6\0\5\52\3\0\31\52\25\0"+
    "\10\52\6\0\5\52\3\0\23\52\1\316\5\52\25\0"+
    "\10\52\6\0\5\52\3\0\17\52\1\317\11\52\25\0"+
    "\10\52\6\0\5\52\3\0\23\52\1\320\5\52\25\0"+
    "\10\52\6\0\5\52\3\0\5\52\1\321\23\52\25\0"+
    "\10\52\6\0\5\52\3\0\21\52\1\322\7\52\25\0"+
    "\10\52\6\0\5\52\3\0\23\52\1\323\5\52\25\0"+
    "\10\52\6\0\5\52\3\0\15\52\1\324\13\52\25\0"+
    "\10\52\6\0\5\52\3\0\1\52\1\325\17\52\1\326"+
    "\7\52\25\0\10\52\6\0\5\52\3\0\11\52\1\327"+
    "\17\52\25\0\10\52\6\0\5\52\3\0\27\52\1\330"+
    "\1\52\25\0\10\52\6\0\5\52\3\0\24\52\1\331"+
    "\4\52\25\0\10\52\6\0\5\52\3\0\20\52\1\332"+
    "\10\52\25\0\2\52\1\333\5\52\6\0\5\52\3\0"+
    "\31\52\25\0\10\52\6\0\5\52\3\0\21\52\1\334"+
    "\7\52\25\0\10\52\6\0\5\52\3\0\3\52\1\335"+
    "\25\52\25\0\10\52\6\0\5\52\3\0\11\52\1\336"+
    "\17\52\6\0\3\236\1\0\1\237\173\0\1\337\26\0"+
    "\10\242\74\0\10\340\6\0\3\340\6\0\6\340\47\0"+
    "\10\52\6\0\5\52\3\0\21\52\1\341\7\52\25\0"+
    "\10\52\6\0\5\52\3\0\21\52\1\342\7\52\25\0"+
    "\10\52\6\0\5\52\3\0\16\52\1\343\12\52\25\0"+
    "\10\52\6\0\5\52\3\0\11\52\1\344\17\52\25\0"+
    "\10\52\6\0\5\52\3\0\22\52\1\345\6\52\25\0"+
    "\6\52\1\346\1\52\6\0\5\52\3\0\31\52\25\0"+
    "\2\52\1\347\5\52\6\0\5\52\3\0\31\52\25\0"+
    "\10\52\6\0\5\52\3\0\22\52\1\350\1\52\1\351"+
    "\4\52\25\0\10\52\6\0\5\52\3\0\1\52\1\352"+
    "\27\52\25\0\1\52\1\353\1\52\1\354\3\52\1\355"+
    "\6\0\5\52\3\0\2\52\1\356\26\52\25\0\10\52"+
    "\6\0\5\52\3\0\17\52\1\357\11\52\25\0\10\52"+
    "\6\0\5\52\3\0\11\52\1\360\17\52\25\0\10\52"+
    "\6\0\5\52\3\0\21\52\1\361\7\52\25\0\10\52"+
    "\6\0\5\52\3\0\11\52\1\362\17\52\25\0\10\52"+
    "\6\0\5\52\3\0\14\52\1\363\14\52\23\0\1\272"+
    "\1\0\10\364\6\0\3\364\6\0\6\364\27\0\12\266"+
    "\1\365\71\266\12\267\1\366\71\267\20\0\10\271\74\0"+
    "\10\271\24\0\1\265\47\0\10\367\6\0\3\367\6\0"+
    "\6\367\45\0\1\367\1\0\10\273\6\0\3\273\1\0"+
    "\1\370\4\0\6\273\11\0\1\370\3\0\1\162\31\0"+
    "\10\52\6\0\5\52\3\0\1\52\1\371\27\52\25\0"+
    "\10\52\6\0\5\52\3\0\15\52\1\372\13\52\25\0"+
    "\10\52\6\0\5\52\3\0\4\52\1\373\24\52\25\0"+
    "\10\52\6\0\5\52\3\0\3\52\1\374\25\52\25\0"+
    "\10\52\6\0\5\52\3\0\14\52\1\375\14\52\25\0"+
    "\10\52\6\0\5\52\3\0\1\52\1\376\27\52\25\0"+
    "\10\52\6\0\5\52\3\0\5\52\1\377\23\52\25\0"+
    "\10\52\6\0\5\52\3\0\22\52\1\u0100\1\u0101\5\52"+
    "\25\0\10\52\6\0\5\52\3\0\1\52\1\u0102\27\52"+
    "\25\0\10\52\6\0\5\52\3\0\3\52\1\u0103\25\52"+
    "\25\0\10\52\6\0\5\52\3\0\5\52\1\u0104\23\52"+
    "\25\0\10\52\6\0\5\52\3\0\2\52\1\u0105\26\52"+
    "\25\0\10\52\6\0\5\52\3\0\14\52\1\u0106\5\52"+
    "\1\u0107\6\52\25\0\10\52\6\0\5\52\3\0\20\52"+
    "\1\u0108\10\52\25\0\2\52\1\u0109\1\u010a\1\u010b\3\52"+
    "\6\0\5\52\3\0\31\52\25\0\10\52\6\0\5\52"+
    "\3\0\21\52\1\u010c\7\52\25\0\10\52\6\0\5\52"+
    "\3\0\24\52\1\u010d\4\52\25\0\10\52\6\0\5\52"+
    "\3\0\20\52\1\u010e\10\52\25\0\10\52\6\0\5\52"+
    "\3\0\23\52\1\u010f\5\52\25\0\10\52\6\0\5\52"+
    "\3\0\24\52\1\u0110\4\52\25\0\10\52\6\0\5\52"+
    "\3\0\23\52\1\u0111\5\52\25\0\10\52\6\0\5\52"+
    "\3\0\23\52\1\u0112\5\52\25\0\10\52\6\0\5\52"+
    "\3\0\5\52\1\u0113\23\52\25\0\10\52\6\0\5\52"+
    "\3\0\5\52\1\u0114\23\52\25\0\2\52\1\u0115\1\u0116"+
    "\1\u0117\3\52\6\0\5\52\3\0\31\52\25\0\10\52"+
    "\6\0\5\52\3\0\14\52\1\u0118\14\52\25\0\10\u0119"+
    "\6\0\3\u0119\6\0\6\u0119\47\0\10\340\6\0\3\340"+
    "\6\0\6\340\15\0\1\162\31\0\10\52\6\0\5\52"+
    "\3\0\1\52\1\u011a\27\52\25\0\10\52\6\0\5\52"+
    "\3\0\1\52\1\u011b\27\52\25\0\10\52\6\0\5\52"+
    "\3\0\3\52\1\u011c\25\52\25\0\10\52\6\0\5\52"+
    "\3\0\25\52\1\u011d\3\52\25\0\10\52\6\0\5\52"+
    "\3\0\10\52\1\u011e\20\52\25\0\10\52\6\0\5\52"+
    "\3\0\6\52\1\u011f\13\52\1\u0120\1\52\1\u0121\4\52"+
    "\25\0\10\52\6\0\5\52\3\0\6\52\1\u0122\13\52"+
    "\1\u0123\1\52\1\u0124\4\52\25\0\10\52\6\0\5\52"+
    "\3\0\11\52\1\u0125\4\52\1\u0126\12\52\25\0\10\52"+
    "\6\0\5\52\3\0\11\52\1\u0127\4\52\1\u0128\12\52"+
    "\25\0\10\52\6\0\5\52\3\0\4\52\1\u0129\24\52"+
    "\25\0\1\52\1\u012a\4\52\1\u012b\1\52\6\0\5\52"+
    "\3\0\31\52\25\0\2\52\1\u012c\5\52\6\0\5\52"+
    "\3\0\31\52\25\0\10\52\6\0\5\52\3\0\22\52"+
    "\1\u012d\1\52\1\u012e\4\52\25\0\1\52\1\u012f\6\52"+
    "\6\0\5\52\3\0\1\52\1\u0130\27\52\25\0\10\52"+
    "\6\0\5\52\3\0\21\52\1\u0131\7\52\25\0\10\52"+
    "\6\0\5\52\3\0\6\52\1\u0132\22\52\25\0\10\52"+
    "\6\0\5\52\3\0\13\52\1\u0133\15\52\25\0\10\52"+
    "\6\0\5\52\3\0\23\52\1\u0134\5\52\25\0\10\52"+
    "\6\0\5\52\3\0\22\52\1\u0107\6\52\23\0\1\367"+
    "\1\0\10\364\6\0\3\364\1\0\1\370\4\0\6\364"+
    "\11\0\1\370\15\0\12\266\1\365\4\266\1\u0135\64\266"+
    "\12\267\1\366\4\267\1\u0136\64\267\20\0\10\367\6\0"+
    "\3\367\1\0\1\370\4\0\6\367\11\0\1\370\30\0"+
    "\1\u0137\1\0\1\u0137\2\0\10\u0138\74\0\10\52\6\0"+
    "\5\52\3\0\30\52\1\u0139\25\0\10\52\6\0\5\52"+
    "\3\0\11\52\1\u013a\17\52\25\0\10\52\6\0\5\52"+
    "\3\0\11\52\1\u013b\17\52\25\0\10\52\6\0\5\52"+
    "\3\0\1\52\1\u013c\27\52\25\0\10\52\6\0\5\52"+
    "\3\0\13\52\1\u013d\15\52\25\0\10\52\6\0\5\52"+
    "\3\0\23\52\1\u013e\5\52\25\0\10\52\6\0\5\52"+
    "\3\0\11\52\1\u013f\17\52\25\0\10\52\6\0\5\52"+
    "\3\0\24\52\1\u0140\4\52\25\0\10\52\6\0\5\52"+
    "\3\0\1\52\1\u0141\27\52\25\0\10\52\6\0\5\52"+
    "\3\0\14\52\1\u0142\14\52\25\0\10\52\6\0\5\52"+
    "\3\0\23\52\1\u0143\5\52\25\0\10\52\6\0\5\52"+
    "\3\0\5\52\1\u0144\23\52\25\0\10\52\6\0\5\52"+
    "\3\0\27\52\1\u0145\1\52\25\0\10\52\6\0\5\52"+
    "\3\0\27\52\1\u0146\1\52\25\0\10\52\6\0\5\52"+
    "\3\0\27\52\1\u0147\1\52\25\0\10\52\6\0\5\52"+
    "\3\0\21\52\1\u0148\7\52\25\0\10\52\6\0\5\52"+
    "\3\0\21\52\1\u0149\7\52\25\0\10\52\6\0\5\52"+
    "\3\0\14\52\1\u014a\14\52\25\0\10\52\6\0\5\52"+
    "\3\0\11\52\1\u014b\17\52\25\0\10\52\6\0\5\52"+
    "\3\0\3\52\1\u014c\25\52\25\0\10\52\6\0\5\52"+
    "\3\0\3\52\1\u014d\25\52\25\0\10\52\6\0\5\52"+
    "\3\0\24\52\1\u014e\4\52\25\0\10\52\6\0\5\52"+
    "\3\0\6\52\1\u014f\1\52\1\u0150\1\u0151\12\52\1\u0152"+
    "\4\52\25\0\10\52\6\0\5\52\3\0\6\52\1\u0153"+
    "\1\52\1\u0154\1\u0155\12\52\1\u0156\4\52\25\0\10\52"+
    "\6\0\5\52\3\0\6\52\1\u0157\1\52\1\u0158\1\u0159"+
    "\12\52\1\u015a\4\52\25\0\10\52\6\0\5\52\3\0"+
    "\5\52\1\u015b\23\52\25\0\10\52\6\0\5\52\3\0"+
    "\30\52\1\u015c\25\0\7\52\1\u015d\6\0\5\52\3\0"+
    "\31\52\25\0\10\52\6\0\5\52\3\0\23\52\1\u015e"+
    "\5\52\25\0\10\52\6\0\5\52\3\0\1\52\1\u015f"+
    "\27\52\25\0\10\52\6\0\5\52\3\0\1\u0160\30\52"+
    "\25\0\10\52\6\0\5\52\3\0\14\52\1\u0161\14\52"+
    "\25\0\10\52\6\0\5\52\3\0\11\52\1\u0162\17\52"+
    "\25\0\10\52\6\0\5\52\3\0\11\52\1\u0163\17\52"+
    "\25\0\10\52\6\0\5\52\3\0\14\52\1\u0164\14\52"+
    "\25\0\10\52\6\0\5\52\3\0\11\52\1\u0165\17\52"+
    "\25\0\10\52\6\0\5\52\3\0\11\52\1\u0166\17\52"+
    "\25\0\10\52\6\0\5\52\3\0\16\52\1\u0167\12\52"+
    "\25\0\10\52\6\0\5\52\3\0\17\52\1\u0168\11\52"+
    "\25\0\10\52\6\0\5\52\3\0\16\52\1\u0169\12\52"+
    "\25\0\10\52\6\0\5\52\3\0\17\52\1\u016a\11\52"+
    "\25\0\10\52\6\0\5\52\3\0\1\u016b\30\52\25\0"+
    "\10\52\6\0\5\52\3\0\2\52\1\u016c\26\52\25\0"+
    "\10\52\6\0\5\52\3\0\6\52\1\u016d\13\52\1\u016e"+
    "\1\52\1\u016f\4\52\25\0\10\52\6\0\5\52\3\0"+
    "\6\52\1\u0170\13\52\1\u0171\1\52\1\u0172\4\52\25\0"+
    "\10\52\6\0\5\52\3\0\11\52\1\u0173\4\52\1\u0174"+
    "\12\52\25\0\10\52\6\0\5\52\3\0\11\52\1\u0175"+
    "\4\52\1\u0176\12\52\25\0\1\u0177\7\52\6\0\5\52"+
    "\3\0\31\52\25\0\1\52\1\u0178\1\52\1\u0179\3\52"+
    "\1\u017a\6\0\5\52\3\0\31\52\25\0\10\52\6\0"+
    "\5\52\3\0\1\52\1\u017b\27\52\25\0\10\52\6\0"+
    "\5\52\3\0\17\52\1\u017c\11\52\25\0\10\52\6\0"+
    "\5\52\3\0\7\52\1\u017d\21\52\25\0\10\52\6\0"+
    "\5\52\3\0\5\52\1\u017e\23\52\25\0\10\u0138\74\0"+
    "\10\u0138\24\0\1\u017f\47\0\10\52\6\0\5\52\3\0"+
    "\3\52\1\u0180\25\52\25\0\10\52\6\0\5\52\3\0"+
    "\16\52\1\u0181\12\52\25\0\10\52\6\0\5\52\3\0"+
    "\22\52\1\u0182\6\52\25\0\10\52\6\0\5\52\3\0"+
    "\16\52\1\u0183\12\52\25\0\10\52\6\0\5\52\3\0"+
    "\14\52\1\u0184\14\52\25\0\10\52\6\0\5\52\3\0"+
    "\21\52\1\u0185\7\52\25\0\10\52\6\0\5\52\3\0"+
    "\5\52\1\u0186\23\52\25\0\10\52\6\0\5\52\3\0"+
    "\10\52\1\u0187\20\52\25\0\2\52\1\u0188\1\u0189\1\u018a"+
    "\3\52\6\0\5\52\3\0\31\52\25\0\2\52\1\u018b"+
    "\1\u018c\1\u018d\3\52\6\0\5\52\3\0\31\52\25\0"+
    "\2\52\1\u018e\1\u018f\1\u0190\3\52\6\0\5\52\3\0"+
    "\31\52\25\0\10\52\6\0\5\52\3\0\11\52\1\u0191"+
    "\17\52\25\0\10\52\6\0\5\52\3\0\16\52\1\u0192"+
    "\12\52\25\0\10\52\6\0\5\52\3\0\5\52\1\u0193"+
    "\23\52\25\0\10\52\6\0\5\52\3\0\3\52\1\u0194"+
    "\25\52\25\0\10\52\6\0\5\52\3\0\23\52\1\u0195"+
    "\5\52\25\0\10\52\6\0\5\52\3\0\10\52\1\u0196"+
    "\20\52\25\0\10\52\6\0\5\52\3\0\21\52\1\u0197"+
    "\7\52\25\0\10\52\6\0\5\52\3\0\24\52\1\u0198"+
    "\4\52\25\0\10\52\6\0\5\52\3\0\11\52\1\u0199"+
    "\17\52\25\0\10\52\6\0\5\52\3\0\23\52\1\u019a"+
    "\5\52\25\0\10\52\6\0\5\52\3\0\3\52\1\u019b"+
    "\25\52\25\0\10\52\6\0\5\52\3\0\17\52\1\u019c"+
    "\11\52\25\0\10\52\6\0\5\52\3\0\16\52\1\u019d"+
    "\12\52\25\0\10\52\6\0\5\52\3\0\16\52\1\u019e"+
    "\12\52\25\0\10\52\6\0\5\52\3\0\17\52\1\u019f"+
    "\11\52\25\0\10\52\6\0\5\52\3\0\16\52\1\u01a0"+
    "\12\52\25\0\10\52\6\0\5\52\3\0\16\52\1\u01a1"+
    "\12\52\25\0\10\52\6\0\5\52\3\0\23\52\1\u01a2"+
    "\5\52\25\0\10\52\6\0\5\52\3\0\21\52\1\u01a3"+
    "\7\52\25\0\10\52\6\0\5\52\3\0\23\52\1\u01a4"+
    "\5\52\25\0\10\52\6\0\5\52\3\0\21\52\1\u01a5"+
    "\7\52\25\0\10\52\6\0\5\52\3\0\26\52\1\u01a6"+
    "\2\52\25\0\1\52\1\u01a7\6\52\6\0\5\52\3\0"+
    "\31\52\25\0\10\52\6\0\5\52\3\0\14\52\1\u01a8"+
    "\14\52\25\0\10\52\6\0\5\52\3\0\11\52\1\u01a9"+
    "\17\52\25\0\10\52\6\0\5\52\3\0\11\52\1\u01aa"+
    "\17\52\25\0\10\52\6\0\5\52\3\0\14\52\1\u01ab"+
    "\14\52\25\0\10\52\6\0\5\52\3\0\11\52\1\u01ac"+
    "\17\52\25\0\10\52\6\0\5\52\3\0\11\52\1\u01ad"+
    "\17\52\25\0\10\52\6\0\5\52\3\0\16\52\1\u01ae"+
    "\12\52\25\0\10\52\6\0\5\52\3\0\17\52\1\u01af"+
    "\11\52\25\0\10\52\6\0\5\52\3\0\16\52\1\u01b0"+
    "\12\52\25\0\10\52\6\0\5\52\3\0\17\52\1\u01b1"+
    "\11\52\25\0\10\52\6\0\5\52\3\0\1\52\1\u01b2"+
    "\27\52\25\0\6\52\1\u01b3\1\52\6\0\5\52\3\0"+
    "\31\52\25\0\2\52\1\u01b4\5\52\6\0\5\52\3\0"+
    "\31\52\25\0\10\52\6\0\5\52\3\0\22\52\1\u01b5"+
    "\1\52\1\u01b6\4\52\25\0\10\52\6\0\5\52\3\0"+
    "\7\52\1\u01b7\21\52\25\0\10\52\6\0\5\52\3\0"+
    "\21\52\1\u01b8\7\52\25\0\10\52\6\0\5\52\3\0"+
    "\21\52\1\u01b9\7\52\25\0\10\52\6\0\5\52\3\0"+
    "\7\52\1\u01ba\21\52\25\0\10\52\6\0\5\52\3\0"+
    "\23\52\1\u01bb\5\52\25\0\10\52\6\0\5\52\3\0"+
    "\24\52\1\u01bc\4\52\25\0\10\52\6\0\5\52\3\0"+
    "\23\52\1\u01bd\5\52\25\0\10\52\6\0\5\52\3\0"+
    "\4\52\1\u01be\24\52\25\0\10\52\6\0\5\52\3\0"+
    "\21\52\1\u01bf\7\52\25\0\10\52\6\0\5\52\3\0"+
    "\6\52\1\u01c0\1\52\1\u01c1\20\52\25\0\10\52\6\0"+
    "\5\52\3\0\6\52\1\u01c2\1\52\1\u01c3\20\52\25\0"+
    "\10\52\6\0\5\52\3\0\6\52\1\u01c4\1\52\1\u01c5"+
    "\20\52\25\0\10\52\6\0\5\52\3\0\6\52\1\u01c6"+
    "\1\52\1\u01c7\20\52\25\0\10\52\6\0\5\52\3\0"+
    "\6\52\1\u01c8\1\52\1\u01c9\20\52\25\0\10\52\6\0"+
    "\5\52\3\0\6\52\1\u01ca\1\52\1\u01cb\20\52\25\0"+
    "\10\52\6\0\5\52\3\0\6\52\1\u01cc\1\52\1\u01cd"+
    "\20\52\25\0\10\52\6\0\5\52\3\0\6\52\1\u01ce"+
    "\1\52\1\u01cf\20\52\25\0\10\52\6\0\5\52\3\0"+
    "\6\52\1\u01d0\1\52\1\u01d1\20\52\25\0\10\52\6\0"+
    "\5\52\3\0\4\52\1\u01d2\24\52\25\0\10\52\6\0"+
    "\5\52\3\0\21\52\1\u01d3\7\52\25\0\10\52\6\0"+
    "\1\u01d4\4\52\3\0\31\52\25\0\10\52\6\0\5\52"+
    "\3\0\5\52\1\u01d5\23\52\25\0\10\52\6\0\5\52"+
    "\3\0\16\52\1\u01d6\12\52\25\0\10\52\6\0\5\52"+
    "\3\0\17\52\1\u01d7\11\52\25\0\10\52\6\0\5\52"+
    "\3\0\5\52\1\u01d8\23\52\25\0\10\52\6\0\5\52"+
    "\3\0\17\52\1\u01d9\11\52\25\0\10\52\6\0\5\52"+
    "\3\0\1\52\1\u01da\27\52\25\0\10\52\6\0\5\52"+
    "\3\0\23\52\1\u01db\5\52\25\0\10\52\6\0\5\52"+
    "\3\0\23\52\1\u01dc\5\52\25\0\10\52\6\0\5\52"+
    "\3\0\1\52\1\u01dd\27\52\25\0\10\52\6\0\5\52"+
    "\3\0\23\52\1\u01de\5\52\25\0\10\52\6\0\5\52"+
    "\3\0\23\52\1\u01df\5\52\25\0\10\52\6\0\5\52"+
    "\3\0\15\52\1\u01e0\13\52\25\0\10\52\6\0\5\52"+
    "\3\0\15\52\1\u01e1\13\52\25\0\10\52\6\0\5\52"+
    "\3\0\21\52\1\u01e2\7\52\25\0\1\u01e3\7\52\6\0"+
    "\5\52\3\0\31\52\25\0\10\52\6\0\5\52\3\0"+
    "\17\52\1\u01e4\11\52\25\0\10\52\6\0\5\52\3\0"+
    "\16\52\1\u01e5\12\52\25\0\10\52\6\0\5\52\3\0"+
    "\16\52\1\u01e6\12\52\25\0\10\52\6\0\5\52\3\0"+
    "\17\52\1\u01e7\11\52\25\0\10\52\6\0\5\52\3\0"+
    "\16\52\1\u01e8\12\52\25\0\10\52\6\0\5\52\3\0"+
    "\16\52\1\u01e9\12\52\25\0\10\52\6\0\5\52\3\0"+
    "\23\52\1\u01ea\5\52\25\0\10\52\6\0\5\52\3\0"+
    "\21\52\1\u01eb\7\52\25\0\10\52\6\0\5\52\3\0"+
    "\23\52\1\u01ec\5\52\25\0\10\52\6\0\5\52\3\0"+
    "\21\52\1\u01ed\7\52\25\0\2\52\1\u01ee\5\52\6\0"+
    "\5\52\3\0\31\52\25\0\10\52\6\0\5\52\3\0"+
    "\6\52\1\u01ef\13\52\1\u01f0\1\52\1\u01f1\4\52\25\0"+
    "\10\52\6\0\5\52\3\0\6\52\1\u01f2\13\52\1\u01f3"+
    "\1\52\1\u01f4\4\52\25\0\10\52\6\0\5\52\3\0"+
    "\11\52\1\u01f5\4\52\1\u01f6\12\52\25\0\10\52\6\0"+
    "\5\52\3\0\11\52\1\u01f7\4\52\1\u01f8\12\52\25\0"+
    "\10\52\6\0\5\52\3\0\5\52\1\u01f9\23\52\25\0"+
    "\10\52\6\0\5\52\3\0\15\52\1\u01fa\13\52\25\0"+
    "\10\52\6\0\5\52\3\0\17\52\1\u01fb\11\52\25\0"+
    "\10\52\6\0\5\52\3\0\1\u01fc\30\52\25\0\10\52"+
    "\6\0\5\52\3\0\5\52\1\u01fd\3\52\1\u01fe\17\52"+
    "\25\0\10\52\6\0\5\52\3\0\17\52\1\u01ff\11\52"+
    "\25\0\10\52\6\0\5\52\3\0\5\52\1\u0200\23\52"+
    "\25\0\10\52\6\0\5\52\3\0\1\u0201\30\52\25\0"+
    "\10\52\6\0\5\52\3\0\22\52\1\u0202\6\52\25\0"+
    "\10\52\6\0\5\52\3\0\1\u0203\30\52\25\0\10\52"+
    "\6\0\5\52\3\0\17\52\1\u0204\11\52\25\0\10\52"+
    "\6\0\5\52\3\0\16\52\1\u0205\12\52\25\0\10\52"+
    "\6\0\5\52\3\0\16\52\1\u0206\12\52\25\0\10\52"+
    "\6\0\5\52\3\0\23\52\1\u0207\5\52\25\0\10\52"+
    "\6\0\5\52\3\0\23\52\1\u0208\5\52\25\0\10\52"+
    "\6\0\5\52\3\0\11\52\1\u0209\17\52\25\0\10\52"+
    "\6\0\5\52\3\0\6\52\1\u020a\22\52\25\0\10\52"+
    "\6\0\5\52\3\0\1\52\1\u020b\27\52\25\0\10\52"+
    "\6\0\5\52\3\0\23\52\1\u020c\5\52\25\0\10\52"+
    "\6\0\5\52\3\0\23\52\1\u020d\5\52\25\0\10\52"+
    "\6\0\5\52\3\0\1\52\1\u020e\27\52\25\0\10\52"+
    "\6\0\5\52\3\0\23\52\1\u020f\5\52\25\0\10\52"+
    "\6\0\5\52\3\0\23\52\1\u0210\5\52\25\0\10\52"+
    "\6\0\5\52\3\0\15\52\1\u0211\13\52\25\0\10\52"+
    "\6\0\5\52\3\0\15\52\1\u0212\13\52\25\0\10\52"+
    "\6\0\5\52\3\0\24\52\1\u0213\4\52\25\0\10\52"+
    "\6\0\5\52\3\0\14\52\1\u0214\14\52\25\0\10\52"+
    "\6\0\5\52\3\0\11\52\1\u0215\17\52\25\0\10\52"+
    "\6\0\5\52\3\0\11\52\1\u0216\17\52\25\0\10\52"+
    "\6\0\5\52\3\0\14\52\1\u0217\14\52\25\0\10\52"+
    "\6\0\5\52\3\0\11\52\1\u0218\17\52\25\0\10\52"+
    "\6\0\5\52\3\0\11\52\1\u0219\17\52\25\0\10\52"+
    "\6\0\5\52\3\0\16\52\1\u021a\12\52\25\0\10\52"+
    "\6\0\5\52\3\0\17\52\1\u021b\11\52\25\0\10\52"+
    "\6\0\5\52\3\0\16\52\1\u021c\12\52\25\0\10\52"+
    "\6\0\5\52\3\0\17\52\1\u021d\11\52\25\0\10\52"+
    "\6\0\5\52\3\0\24\52\1\u021e\4\52\25\0\10\52"+
    "\6\0\5\52\3\0\1\52\1\u021f\27\52\25\0\10\52"+
    "\6\0\5\52\3\0\16\52\1\u0220\12\52\25\0\10\52"+
    "\6\0\5\52\3\0\24\52\1\u0221\4\52\25\0\10\52"+
    "\6\0\5\52\3\0\3\52\1\u0222\25\52\25\0\10\52"+
    "\6\0\5\52\3\0\22\52\1\u0223\6\52\25\0\1\52"+
    "\1\u0224\1\u0225\1\u0226\4\52\6\0\5\52\3\0\3\52"+
    "\1\u0227\1\u0228\10\52\1\u0229\4\52\1\u022a\6\52\25\0"+
    "\10\52\6\0\5\52\3\0\21\52\1\u022b\7\52\25\0"+
    "\10\52\6\0\5\52\3\0\22\52\1\u022c\6\52\25\0"+
    "\10\52\6\0\5\52\3\0\23\52\1\u022d\5\52\25\0"+
    "\10\52\6\0\5\52\3\0\14\52\1\u022e\14\52\25\0"+
    "\10\52\6\0\5\52\3\0\23\52\1\u022f\5\52\25\0"+
    "\10\52\6\0\5\52\3\0\23\52\1\u0230\5\52\25\0"+
    "\10\52\6\0\5\52\3\0\16\52\1\u0231\12\52\25\0"+
    "\10\52\6\0\5\52\3\0\17\52\1\u0232\11\52\25\0"+
    "\10\52\6\0\5\52\3\0\16\52\1\u0233\12\52\25\0"+
    "\10\52\6\0\5\52\3\0\16\52\1\u0234\12\52\25\0"+
    "\10\52\6\0\5\52\3\0\17\52\1\u0235\11\52\25\0"+
    "\10\52\6\0\5\52\3\0\16\52\1\u0236\12\52\25\0"+
    "\10\52\6\0\5\52\3\0\16\52\1\u0237\12\52\25\0"+
    "\10\52\6\0\5\52\3\0\23\52\1\u0238\5\52\25\0"+
    "\10\52\6\0\5\52\3\0\21\52\1\u0239\7\52\25\0"+
    "\10\52\6\0\5\52\3\0\23\52\1\u023a\5\52\25\0"+
    "\10\52\6\0\5\52\3\0\21\52\1\u023b\7\52\25\0"+
    "\10\52\6\0\5\52\3\0\20\52\1\u023c\10\52\25\0"+
    "\10\52\6\0\5\52\3\0\21\52\1\u023d\7\52\25\0"+
    "\10\52\6\0\5\52\3\0\7\52\1\u023e\21\52\25\0"+
    "\10\52\6\0\5\52\3\0\7\52\1\u023f\21\52\25\0"+
    "\10\52\6\0\5\52\3\0\17\52\1\u0240\11\52\25\0"+
    "\10\52\6\0\5\52\3\0\5\52\1\u0241\23\52\25\0"+
    "\10\52\6\0\5\52\3\0\4\52\1\u0242\24\52\25\0"+
    "\10\52\6\0\5\52\3\0\4\52\1\u0243\24\52\25\0"+
    "\10\52\6\0\5\52\3\0\4\52\1\u0244\24\52\25\0"+
    "\10\52\6\0\5\52\3\0\24\52\1\u0245\4\52\25\0"+
    "\10\52\6\0\5\52\3\0\5\52\1\u0246\23\52\25\0"+
    "\10\52\6\0\5\52\3\0\24\52\1\u0247\4\52\25\0"+
    "\10\52\6\0\5\52\3\0\23\52\1\u0248\5\52\25\0"+
    "\10\52\6\0\5\52\3\0\15\52\1\u0249\13\52\25\0"+
    "\10\52\6\0\5\52\3\0\23\52\1\u024a\5\52\25\0"+
    "\10\52\6\0\5\52\3\0\5\52\1\u024b\23\52\25\0"+
    "\10\52\6\0\5\52\3\0\17\52\1\u024c\11\52\25\0"+
    "\10\52\6\0\5\52\3\0\17\52\1\u024d\11\52\25\0"+
    "\10\52\6\0\5\52\3\0\1\52\1\u024e\27\52\25\0"+
    "\10\52\6\0\5\52\3\0\23\52\1\u024f\5\52\25\0"+
    "\10\52\6\0\5\52\3\0\23\52\1\u0250\5\52\25\0"+
    "\10\52\6\0\5\52\3\0\1\52\1\u0251\27\52\25\0"+
    "\10\52\6\0\5\52\3\0\23\52\1\u0252\5\52\25\0"+
    "\10\52\6\0\5\52\3\0\23\52\1\u0253\5\52\25\0"+
    "\10\52\6\0\5\52\3\0\15\52\1\u0254\13\52\25\0"+
    "\10\52\6\0\5\52\3\0\15\52\1\u0255\13\52\25\0"+
    "\10\52\6\0\5\52\3\0\21\52\1\u0256\7\52\25\0"+
    "\10\52\6\0\5\52\3\0\10\52\1\u0257\20\52\25\0"+
    "\10\52\6\0\5\52\3\0\15\52\1\u0258\13\52\25\0"+
    "\10\52\6\0\5\52\3\0\21\52\1\u0259\7\52\25\0"+
    "\10\52\6\0\5\52\3\0\1\u025a\30\52\25\0\10\52"+
    "\6\0\5\52\3\0\2\52\1\u025b\26\52\25\0\10\52"+
    "\6\0\5\52\3\0\20\52\1\u025c\10\52\25\0\10\52"+
    "\6\0\5\52\3\0\14\52\1\u025d\14\52\25\0\10\52"+
    "\6\0\5\52\3\0\17\52\1\u025e\11\52\25\0\10\52"+
    "\6\0\5\52\3\0\1\u025f\30\52\25\0\10\52\6\0"+
    "\5\52\3\0\1\52\1\u0260\27\52\25\0\10\52\6\0"+
    "\5\52\3\0\1\52\1\u0261\27\52\25\0\10\52\6\0"+
    "\5\52\3\0\21\52\1\u0262\7\52\25\0\10\52\6\0"+
    "\5\52\3\0\23\52\1\u0263\5\52\25\0\10\52\6\0"+
    "\5\52\3\0\23\52\1\u0264\5\52\25\0\10\52\6\0"+
    "\5\52\3\0\1\u0265\30\52\25\0\10\52\6\0\5\52"+
    "\3\0\1\52\1\u0266\27\52\25\0\10\52\6\0\5\52"+
    "\3\0\20\52\1\u0267\10\52\25\0\10\52\6\0\5\52"+
    "\3\0\23\52\1\u0268\5\52\25\0\10\52\6\0\5\52"+
    "\3\0\1\52\1\u0269\27\52\25\0\10\52\6\0\5\52"+
    "\3\0\5\52\1\u026a\23\52\25\0\10\52\6\0\5\52"+
    "\3\0\23\52\1\u026b\5\52\25\0\10\52\6\0\5\52"+
    "\3\0\23\52\1\u026c\5\52\25\0\10\52\6\0\5\52"+
    "\3\0\21\52\1\u026d\7\52\25\0\10\52\6\0\5\52"+
    "\3\0\22\52\1\u026e\6\52\25\0\10\52\6\0\5\52"+
    "\3\0\16\52\1\u026f\12\52\25\0\10\52\6\0\5\52"+
    "\3\0\23\52\1\u0270\5\52\25\0\10\52\6\0\5\52"+
    "\3\0\15\52\1\u0271\13\52\25\0\10\52\6\0\5\52"+
    "\3\0\22\52\1\u0272\6\52\25\0\10\52\6\0\5\52"+
    "\3\0\30\52\1\u0273\25\0\10\52\6\0\5\52\3\0"+
    "\1\52\1\u0274\27\52\25\0\10\52\6\0\5\52\3\0"+
    "\21\52\1\u0275\7\52\25\0\10\52\6\0\5\52\3\0"+
    "\1\u0276\30\52\25\0\10\52\6\0\5\52\3\0\10\52"+
    "\1\u0277\20\52\25\0\10\52\6\0\5\52\3\0\11\52"+
    "\1\u0278\17\52\25\0\10\52\6\0\5\52\3\0\1\52"+
    "\1\u0279\27\52\25\0\10\52\6\0\5\52\3\0\21\52"+
    "\1\u027a\7\52\25\0\10\52\6\0\5\52\3\0\23\52"+
    "\1\u027b\5\52\25\0\10\52\6\0\5\52\3\0\21\52"+
    "\1\u027c\7\52\25\0\10\52\6\0\5\52\3\0\21\52"+
    "\1\u027d\7\52\25\0\10\52\6\0\5\52\3\0\21\52"+
    "\1\u027e\7\52\25\0\10\52\6\0\5\52\3\0\1\52"+
    "\1\u027f\27\52\25\0\10\52\6\0\5\52\3\0\1\u0280"+
    "\30\52\25\0\10\52\6\0\5\52\3\0\22\52\1\u0281"+
    "\6\52\25\0\10\52\6\0\5\52\3\0\7\52\1\u0282"+
    "\21\52\25\0\10\52\6\0\5\52\3\0\7\52\1\u0283"+
    "\21\52\25\0\10\52\6\0\5\52\3\0\7\52\1\u0284"+
    "\21\52\25\0\10\52\6\0\5\52\3\0\11\52\1\u0285"+
    "\17\52\25\0\10\52\6\0\5\52\3\0\1\52\1\u0286"+
    "\27\52\25\0\10\52\6\0\5\52\3\0\21\52\1\u0287"+
    "\7\52\25\0\2\52\1\u0288\5\52\6\0\5\52\3\0"+
    "\3\52\1\u0289\11\52\1\u028a\13\52\25\0\10\52\6\0"+
    "\5\52\3\0\1\52\1\u028b\27\52\25\0\10\52\6\0"+
    "\5\52\3\0\5\52\1\u028c\23\52\25\0\10\52\6\0"+
    "\5\52\3\0\2\52\1\u028d\26\52\25\0\10\52\6\0"+
    "\5\52\3\0\2\52\1\u028e\26\52\25\0\10\52\6\0"+
    "\5\52\3\0\22\52\1\u028f\6\52\25\0\10\52\6\0"+
    "\5\52\3\0\30\52\1\u0290\25\0\10\52\6\0\5\52"+
    "\3\0\21\52\1\u0291\7\52\25\0\10\52\6\0\5\52"+
    "\3\0\4\52\1\u0292\24\52\25\0\10\52\6\0\5\52"+
    "\3\0\24\52\1\u0293\4\52\25\0\10\52\6\0\5\52"+
    "\3\0\24\52\1\u0294\4\52\25\0\10\52\6\0\5\52"+
    "\3\0\15\52\1\u0295\13\52\25\0\10\52\6\0\5\52"+
    "\3\0\1\u0296\30\52\25\0\10\52\6\0\5\52\3\0"+
    "\17\52\1\u0297\11\52\25\0\10\52\6\0\5\52\3\0"+
    "\1\52\1\u0298\27\52\25\0\10\52\6\0\5\52\3\0"+
    "\1\u0299\30\52\25\0\10\52\6\0\5\52\3\0\2\52"+
    "\1\u029a\26\52\25\0\10\52\6\0\5\52\3\0\14\52"+
    "\1\u029b\14\52\25\0\10\52\6\0\5\52\3\0\20\52"+
    "\1\u029c\10\52\25\0\1\52\1\u029d\1\u029e\1\u029f\4\52"+
    "\6\0\5\52\3\0\31\52\25\0\10\52\6\0\5\52"+
    "\3\0\16\52\1\u02a0\12\52\25\0\10\52\6\0\5\52"+
    "\3\0\30\52\1\u02a1\25\0\10\52\6\0\5\52\3\0"+
    "\1\52\1\u02a2\27\52\25\0\10\52\6\0\5\52\3\0"+
    "\5\52\1\u02a3\23\52\25\0\10\52\6\0\5\52\3\0"+
    "\23\52\1\u02a4\5\52\25\0\10\52\6\0\5\52\3\0"+
    "\14\52\1\u02a5\14\52\25\0\10\52\6\0\5\52\3\0"+
    "\4\52\1\u02a6\24\52\25\0\10\52\6\0\5\52\3\0"+
    "\4\52\1\u02a7\24\52\25\0\10\52\6\0\5\52\3\0"+
    "\4\52\1\u02a8\24\52\25\0\10\52\6\0\5\52\3\0"+
    "\21\52\1\u02a9\7\52\25\0\10\52\6\0\5\52\3\0"+
    "\1\u02aa\30\52\25\0\10\52\6\0\5\52\3\0\11\52"+
    "\1\u02ab\17\52\25\0\10\52\6\0\5\52\3\0\5\52"+
    "\1\u02ac\23\52\25\0\10\52\6\0\5\52\3\0\1\u02ad"+
    "\30\52\25\0\10\52\6\0\5\52\3\0\21\52\1\u02ae"+
    "\7\52\25\0\10\52\6\0\5\52\3\0\1\52\1\u02af"+
    "\27\52\25\0\10\52\6\0\5\52\3\0\22\52\1\u02b0"+
    "\6\52\25\0\10\52\6\0\5\52\3\0\4\52\1\u02b1"+
    "\24\52\25\0\10\52\6\0\5\52\3\0\1\52\1\u02b2"+
    "\27\52\25\0\10\52\6\0\5\52\3\0\1\52\1\u02b3"+
    "\27\52\25\0\10\52\6\0\5\52\3\0\21\52\1\u02b4"+
    "\7\52\25\0\10\52\6\0\5\52\3\0\1\52\1\u02b5"+
    "\27\52\25\0\10\52\6\0\5\52\3\0\1\u02b6\30\52"+
    "\25\0\10\52\6\0\5\52\3\0\21\52\1\u02b7\7\52"+
    "\25\0\10\52\6\0\5\52\3\0\30\52\1\u02b8\25\0"+
    "\10\52\6\0\5\52\3\0\21\52\1\u02b9\7\52\25\0"+
    "\10\52\6\0\5\52\3\0\15\52\1\u02ba\13\52\25\0"+
    "\2\52\1\u02bb\5\52\6\0\5\52\3\0\31\52\25\0"+
    "\10\52\6\0\5\52\3\0\21\52\1\u02bc\7\52\25\0"+
    "\10\52\6\0\5\52\3\0\1\52\1\u02bd\27\52\25\0"+
    "\10\52\6\0\5\52\3\0\20\52\1\u02be\10\52\25\0"+
    "\10\52\6\0\5\52\3\0\4\52\1\u02bf\24\52\25\0"+
    "\10\52\6\0\5\52\3\0\1\52\1\u02c0\27\52\25\0"+
    "\10\52\6\0\5\52\3\0\30\52\1\u02c1\25\0\10\52"+
    "\6\0\5\52\3\0\14\52\1\u02c2\14\52\25\0\10\52"+
    "\6\0\5\52\3\0\30\52\1\u02c3\25\0\10\52\6\0"+
    "\5\52\3\0\5\52\1\u02c4\23\52\25\0\10\52\6\0"+
    "\5\52\3\0\4\52\1\u02c5\24\52\25\0\10\52\6\0"+
    "\5\52\3\0\1\u02c6\30\52\25\0\2\52\1\u02c7\5\52"+
    "\6\0\5\52\3\0\31\52\25\0\10\52\6\0\5\52"+
    "\3\0\4\52\1\u02c8\24\52\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[36924];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\5\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\1\11\2\1\1\11\24\1\1\11\1\1\2\11"+
    "\3\1\2\11\4\1\4\11\30\1\10\11\2\0\1\1"+
    "\2\11\3\1\1\11\2\0\1\11\1\0\1\1\3\11"+
    "\1\1\2\11\41\1\2\11\2\0\1\1\1\0\1\1"+
    "\1\0\16\1\1\11\1\1\1\0\1\11\2\1\1\0"+
    "\1\1\1\0\1\1\2\11\41\1\1\0\25\1\2\0"+
    "\1\1\1\0\74\1\2\11\1\0\107\1\1\11\u0149\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[712];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private static final class State {
    final int state;

    private State(int state) {
      this.state = state;
    }
  }

  protected final Stack<State> myStateStack = new Stack<>();

  private void pushState(int state) {
    myStateStack.push(new State(yystate()));
    yybegin(state);
  }

  private void popState() {
    State state = myStateStack.pop();
    yybegin(state.state);
  }

  public _WgslLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _WgslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 210: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 211: break;
          case 3:
            { return BANG;
            }
          // fall through
          case 212: break;
          case 4:
            { return MODULO;
            }
          // fall through
          case 213: break;
          case 5:
            { return AND;
            }
          // fall through
          case 214: break;
          case 6:
            { return PAREN_LEFT;
            }
          // fall through
          case 215: break;
          case 7:
            { return PAREN_RIGHT;
            }
          // fall through
          case 216: break;
          case 8:
            { return STAR;
            }
          // fall through
          case 217: break;
          case 9:
            { return PLUS;
            }
          // fall through
          case 218: break;
          case 10:
            { return COMMA;
            }
          // fall through
          case 219: break;
          case 11:
            { return MINUS;
            }
          // fall through
          case 220: break;
          case 12:
            { return PERIOD;
            }
          // fall through
          case 221: break;
          case 13:
            { return FORWARD_SLASH;
            }
          // fall through
          case 222: break;
          case 14:
            { return INT_LITERAL;
            }
          // fall through
          case 223: break;
          case 15:
            { return COLON;
            }
          // fall through
          case 224: break;
          case 16:
            { return SEMICOLON;
            }
          // fall through
          case 225: break;
          case 17:
            { return LESS_THAN;
            }
          // fall through
          case 226: break;
          case 18:
            { return EQUAL;
            }
          // fall through
          case 227: break;
          case 19:
            { return GREATER_THAN;
            }
          // fall through
          case 228: break;
          case 20:
            { return AT;
            }
          // fall through
          case 229: break;
          case 21:
            { return GENERIC_PLACEHOLDER;
            }
          // fall through
          case 230: break;
          case 22:
            { return BRACKET_LEFT;
            }
          // fall through
          case 231: break;
          case 23:
            { return BRACKET_RIGHT;
            }
          // fall through
          case 232: break;
          case 24:
            { return XOR;
            }
          // fall through
          case 233: break;
          case 25:
            { return UNDERSCORE;
            }
          // fall through
          case 234: break;
          case 26:
            { return IDENT;
            }
          // fall through
          case 235: break;
          case 27:
            { return BRACE_LEFT;
            }
          // fall through
          case 236: break;
          case 28:
            { return OR;
            }
          // fall through
          case 237: break;
          case 29:
            { return BRACE_RIGHT;
            }
          // fall through
          case 238: break;
          case 30:
            { return TILDE;
            }
          // fall through
          case 239: break;
          case 31:
            { popState(); return PAREN_LEFT;
            }
          // fall through
          case 240: break;
          case 32:
            { popState(); pushState(TYPE_SPEC); return TYPE_LESS_THAN;
            }
          // fall through
          case 241: break;
          case 33:
            { popState(); return COLON;
            }
          // fall through
          case 242: break;
          case 34:
            { return TYPE_LESS_THAN;
            }
          // fall through
          case 243: break;
          case 35:
            { popState(); return EQUAL;
            }
          // fall through
          case 244: break;
          case 36:
            { popState(); return TYPE_GREATER_THAN;
            }
          // fall through
          case 245: break;
          case 37:
            { return PREPROCESSOR_DECLARATION;
            }
          // fall through
          case 246: break;
          case 38:
            { popState(); return WHITE_SPACE;
            }
          // fall through
          case 247: break;
          case 39:
            { pushState(PREPROCESSOR); return PREPROCESSOR_DECLARATION;
            }
          // fall through
          case 248: break;
          case 40:
            { popState(); return PREPROCESSOR_DECLARATION;
            }
          // fall through
          case 249: break;
          case 41:
            { pushState(PREPROCESSOR_NESTED); return PREPROCESSOR_DECLARATION;
            }
          // fall through
          case 250: break;
          case 42:
            { return NOT_EQUAL;
            }
          // fall through
          case 251: break;
          case 43:
            { return MODULO_EQUAL;
            }
          // fall through
          case 252: break;
          case 44:
            { return AND_AND;
            }
          // fall through
          case 253: break;
          case 45:
            { return AND_EQUAL;
            }
          // fall through
          case 254: break;
          case 46:
            { return TIMES_EQUAL;
            }
          // fall through
          case 255: break;
          case 47:
            { return PLUS_PLUS;
            }
          // fall through
          case 256: break;
          case 48:
            { return PLUS_EQUAL;
            }
          // fall through
          case 257: break;
          case 49:
            { return MINUS_MINUS;
            }
          // fall through
          case 258: break;
          case 50:
            { return MINUS_EQUAL;
            }
          // fall through
          case 259: break;
          case 51:
            { return ARROW;
            }
          // fall through
          case 260: break;
          case 52:
            { return DECIMAL_FLOAT_LITERAL;
            }
          // fall through
          case 261: break;
          case 53:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 262: break;
          case 54:
            { return LINE_COMMENT;
            }
          // fall through
          case 263: break;
          case 55:
            { return DIVISION_EQUAL;
            }
          // fall through
          case 264: break;
          case 56:
            { return UINT_LITERAL;
            }
          // fall through
          case 265: break;
          case 57:
            { return SHIFT_LEFT;
            }
          // fall through
          case 266: break;
          case 58:
            { return LESS_THAN_EQUAL;
            }
          // fall through
          case 267: break;
          case 59:
            { return EQUAL_EQUAL;
            }
          // fall through
          case 268: break;
          case 60:
            { return GREATER_THAN_EQUAL;
            }
          // fall through
          case 269: break;
          case 61:
            { return SHIFT_RIGHT;
            }
          // fall through
          case 270: break;
          case 62:
            { pushState(ATTRIBUTE); return ATTR_LEFT;
            }
          // fall through
          case 271: break;
          case 63:
            { return XOR_EQUAL;
            }
          // fall through
          case 272: break;
          case 64:
            { return FN;
            }
          // fall through
          case 273: break;
          case 65:
            { return IF;
            }
          // fall through
          case 274: break;
          case 66:
            { return OR_EQUAL;
            }
          // fall through
          case 275: break;
          case 67:
            { return OR_OR;
            }
          // fall through
          case 276: break;
          case 68:
            { popState(); return ATTR_RIGHT;
            }
          // fall through
          case 277: break;
          case 69:
            { return DOC_COMMENT;
            }
          // fall through
          case 278: break;
          case 70:
            { return SHIFT_LEFT_EQUAL;
            }
          // fall through
          case 279: break;
          case 71:
            { return SHIFT_RIGHT_EQUAL;
            }
          // fall through
          case 280: break;
          case 72:
            { return FLOAT32;
            }
          // fall through
          case 281: break;
          case 73:
            { return FOR;
            }
          // fall through
          case 282: break;
          case 74:
            { return INT32;
            }
          // fall through
          case 283: break;
          case 75:
            { return LET;
            }
          // fall through
          case 284: break;
          case 76:
            { pushState(TYPE_SPEC); return POINTER;
            }
          // fall through
          case 285: break;
          case 77:
            { return UINT32;
            }
          // fall through
          case 286: break;
          case 78:
            { pushState(TYPE_SPEC); return VAR;
            }
          // fall through
          case 287: break;
          case 79:
            { return HEX_FLOAT_LITERAL;
            }
          // fall through
          case 288: break;
          case 80:
            { return BOOL;
            }
          // fall through
          case 289: break;
          case 81:
            { return CASE;
            }
          // fall through
          case 290: break;
          case 82:
            { return ELSE;
            }
          // fall through
          case 291: break;
          case 83:
            { return LOOP;
            }
          // fall through
          case 292: break;
          case 84:
            { return TRUE;
            }
          // fall through
          case 293: break;
          case 85:
            { return TYPE;
            }
          // fall through
          case 294: break;
          case 86:
            { pushState(TYPE_SPEC); return VEC2;
            }
          // fall through
          case 295: break;
          case 87:
            { pushState(TYPE_SPEC); return VEC3;
            }
          // fall through
          case 296: break;
          case 88:
            { pushState(TYPE_SPEC); return VEC4;
            }
          // fall through
          case 297: break;
          case 89:
            { return READ;
            }
          // fall through
          case 298: break;
          case 90:
            { pushState(ARRAY_SPEC); return ARRAY;
            }
          // fall through
          case 299: break;
          case 91:
            { return BREAK;
            }
          // fall through
          case 300: break;
          case 92:
            { pushState(TYPE_SPEC); return CONST;
            }
          // fall through
          case 301: break;
          case 93:
            { return FALSE;
            }
          // fall through
          case 302: break;
          case 94:
            { return VEC2F;
            }
          // fall through
          case 303: break;
          case 95:
            { return VEC2H;
            }
          // fall through
          case 304: break;
          case 96:
            { return VEC2I;
            }
          // fall through
          case 305: break;
          case 97:
            { return VEC2U;
            }
          // fall through
          case 306: break;
          case 98:
            { return VEC3F;
            }
          // fall through
          case 307: break;
          case 99:
            { return VEC3H;
            }
          // fall through
          case 308: break;
          case 100:
            { return VEC3I;
            }
          // fall through
          case 309: break;
          case 101:
            { return VEC3U;
            }
          // fall through
          case 310: break;
          case 102:
            { return VEC4F;
            }
          // fall through
          case 311: break;
          case 103:
            { return VEC4H;
            }
          // fall through
          case 312: break;
          case 104:
            { return VEC4I;
            }
          // fall through
          case 313: break;
          case 105:
            { return VEC4U;
            }
          // fall through
          case 314: break;
          case 106:
            { return WHILE;
            }
          // fall through
          case 315: break;
          case 107:
            { pushState(TYPE_SPEC); return ARRAY;
            }
          // fall through
          case 316: break;
          case 108:
            { return WRITE;
            }
          // fall through
          case 317: break;
          case 109:
            { pushState(TYPE_SPEC); return ATOMIC;
            }
          // fall through
          case 318: break;
          case 110:
            { return ENABLE;
            }
          // fall through
          case 319: break;
          case 111:
            { pushState(TYPE_SPEC); return MAT2X2;
            }
          // fall through
          case 320: break;
          case 112:
            { pushState(TYPE_SPEC); return MAT2X3;
            }
          // fall through
          case 321: break;
          case 113:
            { pushState(TYPE_SPEC); return MAT2X4;
            }
          // fall through
          case 322: break;
          case 114:
            { pushState(TYPE_SPEC); return MAT3X2;
            }
          // fall through
          case 323: break;
          case 115:
            { pushState(TYPE_SPEC); return MAT3X3;
            }
          // fall through
          case 324: break;
          case 116:
            { pushState(TYPE_SPEC); return MAT3X4;
            }
          // fall through
          case 325: break;
          case 117:
            { pushState(TYPE_SPEC); return MAT4X2;
            }
          // fall through
          case 326: break;
          case 118:
            { pushState(TYPE_SPEC); return MAT4X3;
            }
          // fall through
          case 327: break;
          case 119:
            { pushState(TYPE_SPEC); return MAT4X4;
            }
          // fall through
          case 328: break;
          case 120:
            { return RETURN;
            }
          // fall through
          case 329: break;
          case 121:
            { return STRUCT;
            }
          // fall through
          case 330: break;
          case 122:
            { return SWITCH;
            }
          // fall through
          case 331: break;
          case 123:
            { return R8SINT;
            }
          // fall through
          case 332: break;
          case 124:
            { return R8UINT;
            }
          // fall through
          case 333: break;
          case 125:
            { pushState(TYPE_SPEC); return BITCAST;
            }
          // fall through
          case 334: break;
          case 126:
            { return DEFAULT;
            }
          // fall through
          case 335: break;
          case 127:
            { return DISCARD;
            }
          // fall through
          case 336: break;
          case 128:
            { return MAT2X2F;
            }
          // fall through
          case 337: break;
          case 129:
            { return MAT2X2H;
            }
          // fall through
          case 338: break;
          case 130:
            { return MAT2X3F;
            }
          // fall through
          case 339: break;
          case 131:
            { return MAT2X3H;
            }
          // fall through
          case 340: break;
          case 132:
            { return MAT2X4F;
            }
          // fall through
          case 341: break;
          case 133:
            { return MAT2X4H;
            }
          // fall through
          case 342: break;
          case 134:
            { return MAT3X2F;
            }
          // fall through
          case 343: break;
          case 135:
            { return MAT3X2H;
            }
          // fall through
          case 344: break;
          case 136:
            { return MAT3X3F;
            }
          // fall through
          case 345: break;
          case 137:
            { return MAT3X3H;
            }
          // fall through
          case 346: break;
          case 138:
            { return MAT3X4F;
            }
          // fall through
          case 347: break;
          case 139:
            { return MAT3X4H;
            }
          // fall through
          case 348: break;
          case 140:
            { return MAT4X2F;
            }
          // fall through
          case 349: break;
          case 141:
            { return MAT4X2H;
            }
          // fall through
          case 350: break;
          case 142:
            { return MAT4X3F;
            }
          // fall through
          case 351: break;
          case 143:
            { return MAT4X3H;
            }
          // fall through
          case 352: break;
          case 144:
            { return MAT4X4F;
            }
          // fall through
          case 353: break;
          case 145:
            { return MAT4X4H;
            }
          // fall through
          case 354: break;
          case 146:
            { return SAMPLER;
            }
          // fall through
          case 355: break;
          case 147:
            { return PRIVATE;
            }
          // fall through
          case 356: break;
          case 148:
            { return R16SINT;
            }
          // fall through
          case 357: break;
          case 149:
            { return R16UINT;
            }
          // fall through
          case 358: break;
          case 150:
            { return R32SINT;
            }
          // fall through
          case 359: break;
          case 151:
            { return R32UINT;
            }
          // fall through
          case 360: break;
          case 152:
            { return R8SNORM;
            }
          // fall through
          case 361: break;
          case 153:
            { return R8UNORM;
            }
          // fall through
          case 362: break;
          case 154:
            { return RG8SINT;
            }
          // fall through
          case 363: break;
          case 155:
            { return RG8UINT;
            }
          // fall through
          case 364: break;
          case 156:
            { return STORAGE;
            }
          // fall through
          case 365: break;
          case 157:
            { return UNIFORM;
            }
          // fall through
          case 366: break;
          case 158:
            { return CONTINUE;
            }
          // fall through
          case 367: break;
          case 159:
            { return OVERRIDE;
            }
          // fall through
          case 368: break;
          case 160:
            { return FUNCTION;
            }
          // fall through
          case 369: break;
          case 161:
            { return R16FLOAT;
            }
          // fall through
          case 370: break;
          case 162:
            { return R32FLOAT;
            }
          // fall through
          case 371: break;
          case 163:
            { return RG16SINT;
            }
          // fall through
          case 372: break;
          case 164:
            { return RG16UINT;
            }
          // fall through
          case 373: break;
          case 165:
            { return RG32SINT;
            }
          // fall through
          case 374: break;
          case 166:
            { return RG32UINT;
            }
          // fall through
          case 375: break;
          case 167:
            { return RG8SNORM;
            }
          // fall through
          case 376: break;
          case 168:
            { return RG8UNORM;
            }
          // fall through
          case 377: break;
          case 169:
            { return RG16FLOAT;
            }
          // fall through
          case 378: break;
          case 170:
            { return RG32FLOAT;
            }
          // fall through
          case 379: break;
          case 171:
            { return RGBA8SINT;
            }
          // fall through
          case 380: break;
          case 172:
            { return RGBA8UINT;
            }
          // fall through
          case 381: break;
          case 173:
            { return WORKGROUP;
            }
          // fall through
          case 382: break;
          case 174:
            { return CONTINUING;
            }
          // fall through
          case 383: break;
          case 175:
            { pushState(TYPE_SPEC); return TEXTURE_1D;
            }
          // fall through
          case 384: break;
          case 176:
            { pushState(TYPE_SPEC); return TEXTURE_2D;
            }
          // fall through
          case 385: break;
          case 177:
            { pushState(TYPE_SPEC); return TEXTURE_3D;
            }
          // fall through
          case 386: break;
          case 178:
            { return BGRA8UNORM;
            }
          // fall through
          case 387: break;
          case 179:
            { return READ_WRITE;
            }
          // fall through
          case 388: break;
          case 180:
            { return RGBA16SINT;
            }
          // fall through
          case 389: break;
          case 181:
            { return RGBA16UINT;
            }
          // fall through
          case 390: break;
          case 182:
            { return RGBA32SINT;
            }
          // fall through
          case 391: break;
          case 183:
            { return RGBA32UINT;
            }
          // fall through
          case 392: break;
          case 184:
            { return RGBA8SNORM;
            }
          // fall through
          case 393: break;
          case 185:
            { return RGBA8UNORM;
            }
          // fall through
          case 394: break;
          case 186:
            { return FALLTHROUGH;
            }
          // fall through
          case 395: break;
          case 187:
            { return RGBA16FLOAT;
            }
          // fall through
          case 396: break;
          case 188:
            { return RGBA32FLOAT;
            }
          // fall through
          case 397: break;
          case 189:
            { return STATIC_ASSERT;
            }
          // fall through
          case 398: break;
          case 190:
            { pushState(TYPE_SPEC); return TEXTURE_CUBE;
            }
          // fall through
          case 399: break;
          case 191:
            { return RG11B10FLOAT;
            }
          // fall through
          case 400: break;
          case 192:
            { return RGB10A2UNORM;
            }
          // fall through
          case 401: break;
          case 193:
            { pushState(BIND_SPEC); return BINDING_ARRAY;
            }
          // fall through
          case 402: break;
          case 194:
            { return PUSH_CONSTANT;
            }
          // fall through
          case 403: break;
          case 195:
            { return BGRA8UNORM_SRGB;
            }
          // fall through
          case 404: break;
          case 196:
            { return RGBA8UNORM_SRGB;
            }
          // fall through
          case 405: break;
          case 197:
            { pushState(TYPE_SPEC); return TEXTURE_2D_ARRAY;
            }
          // fall through
          case 406: break;
          case 198:
            { return TEXTURE_DEPTH_2D;
            }
          // fall through
          case 407: break;
          case 199:
            { return SAMPLER_COMPARISON;
            }
          // fall through
          case 408: break;
          case 200:
            { pushState(TYPE_SPEC); return TEXTURE_CUBE_ARRAY;
            }
          // fall through
          case 409: break;
          case 201:
            { return TEXTURE_DEPTH_CUBE;
            }
          // fall through
          case 410: break;
          case 202:
            { pushState(TYPE_SPEC); return TEXTURE_STORAGE_1D;
            }
          // fall through
          case 411: break;
          case 203:
            { pushState(TYPE_SPEC); return TEXTURE_STORAGE_2D;
            }
          // fall through
          case 412: break;
          case 204:
            { pushState(TYPE_SPEC); return TEXTURE_STORAGE_3D;
            }
          // fall through
          case 413: break;
          case 205:
            { return TEXTURE_DEPTH_2D_ARRAY;
            }
          // fall through
          case 414: break;
          case 206:
            { pushState(TYPE_SPEC); return TEXTURE_MULTISAMPLED_2D;
            }
          // fall through
          case 415: break;
          case 207:
            { return TEXTURE_DEPTH_CUBE_ARRAY;
            }
          // fall through
          case 416: break;
          case 208:
            { pushState(TYPE_SPEC); return TEXTURE_STORAGE_2D_ARRAY;
            }
          // fall through
          case 417: break;
          case 209:
            { return TEXTURE_DEPTH_MULTISAMPLED_2D;
            }
          // fall through
          case 418: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
