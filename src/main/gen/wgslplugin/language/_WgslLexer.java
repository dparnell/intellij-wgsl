// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: WGSLLexer.flex

package wgslplugin.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static wgslplugin.language.psi.WGSLTypes.*;


public class _WgslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TYPE_SPEC = 2;
  public static final int BIND_SPEC = 4;
  public static final int ATTRIBUTE = 6;
  public static final int PREPROCESSOR = 8;
  public static final int PREPROCESSOR_NESTED = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\0\1\5\1\0\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\25\1\27\1\25"+
    "\1\30\1\31\1\32\1\33\1\34\1\0\1\35\1\36"+
    "\3\37\1\40\1\37\11\41\1\42\12\41\1\43\1\0"+
    "\1\44\1\45\1\46\1\0\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\41\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\41\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\41\1\76\1\77"+
    "\1\100\1\101\6\0\1\3\32\0\1\1\u01df\0\1\1"+
    "\177\0\13\1\35\0\2\3\5\0\1\1\57\0\1\1"+
    "\240\0\1\1\377\0\u0100\102";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\2\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\21\25\1\32\1\33\1\34\1\35\2\2"+
    "\1\1\1\36\2\1\2\16\1\37\1\40\1\41\1\42"+
    "\1\1\15\25\3\1\2\25\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\2\0\1\16\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\2\0\1\66\1\0\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\15\25\1\76\2\25\1\77\20\25"+
    "\1\100\1\101\2\0\1\45\1\0\1\16\1\0\15\25"+
    "\1\102\1\25\1\0\1\62\2\0\1\62\1\0\1\16"+
    "\1\103\1\104\14\25\1\105\1\25\1\106\1\107\1\110"+
    "\3\25\1\111\10\25\1\112\1\113\2\25\1\0\1\16"+
    "\22\25\1\16\1\63\1\114\1\0\4\25\1\115\1\25"+
    "\1\116\4\25\1\117\3\25\1\120\12\25\1\121\1\122"+
    "\1\123\1\124\1\125\1\25\1\16\16\25\1\126\13\25"+
    "\1\0\1\114\1\127\3\25\1\130\1\131\5\25\1\132"+
    "\12\25\1\133\1\134\1\135\1\136\1\137\1\140\1\141"+
    "\1\142\1\143\1\144\1\145\1\146\1\147\41\25\1\150"+
    "\1\114\1\151\5\25\1\152\1\25\1\153\1\154\1\155"+
    "\1\156\1\157\1\160\1\161\1\162\1\163\1\25\1\164"+
    "\2\25\1\165\1\166\13\25\1\167\1\25\1\170\26\25"+
    "\1\171\1\25\1\172\1\173\2\25\1\174\4\25\1\175"+
    "\2\25\1\176\1\177\1\25\1\200\1\201\1\202\1\203"+
    "\10\25\1\204\1\25\1\205\14\25\1\206\1\207\2\25"+
    "\1\210\2\25\1\211\4\25\1\212\1\25\1\213\1\214"+
    "\3\25\1\215\1\216\1\25\1\217\1\220\1\221\1\222"+
    "\34\25\1\223\1\224\7\25\1\225\1\25\1\226\1\25"+
    "\1\227\1\25\1\230\3\25\1\231\1\232\1\233\4\25"+
    "\1\234\1\25\1\235\3\25\1\236\1\237\1\25\1\240"+
    "\1\241\1\242\1\243\1\25\1\244\13\25\1\245\1\246"+
    "\3\25\1\247\1\25\1\250\5\25\1\251\1\252\1\25"+
    "\1\253\7\25\1\254\21\25\1\255\1\256\1\25\1\257"+
    "\1\25\1\260\15\25\1\261\1\262\1\25\1\263\2\25"+
    "\1\264\1\265\1\266\17\25\1\267\6\25\1\270\1\25"+
    "\1\271\1\25\1\272\4\25\1\273";

  private static int [] zzUnpackAction() {
    int [] result = new int[683];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u01d5\0\u01d5\0\u0367"+
    "\0\u03aa\0\u01d5\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u01d5"+
    "\0\u01d5\0\u053c\0\u057f\0\u05c2\0\u01d5\0\u0605\0\u0648\0\u01d5"+
    "\0\u068b\0\u0605\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u01d5\0\u0b41\0\u01d5\0\u01d5\0\u0b84"+
    "\0\u0bc7\0\u0c0a\0\u01d5\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u01d5"+
    "\0\u01d5\0\u01d5\0\u01d5\0\u0605\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22"+
    "\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a"+
    "\0\u107d\0\u10c0\0\u0430\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f"+
    "\0\u11cc\0\u11cc\0\u11cc\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u01d5"+
    "\0\u01d5\0\u01d5\0\u01d5\0\u0430\0\u1252\0\u1295\0\u01d5\0\u01d5"+
    "\0\u12d8\0\u131b\0\u135e\0\u01d5\0\u13a1\0\u13e4\0\u01d5\0\u1427"+
    "\0\u146a\0\u01d5\0\u01d5\0\u01d5\0\u14ad\0\u01d5\0\u01d5\0\u14f0"+
    "\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708"+
    "\0\u174b\0\u178e\0\u17d1\0\u1814\0\u0605\0\u1857\0\u189a\0\u0605"+
    "\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2"+
    "\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca"+
    "\0\u01d5\0\u01d5\0\u1d0d\0\u0c0a\0\u0c0a\0\u1d50\0\u1d93\0\u1dd6"+
    "\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee"+
    "\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u01d5\0\u2180\0\u21c3"+
    "\0\u01d5\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312\0\u01d5\0\u01d5"+
    "\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a"+
    "\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u0605\0\u2679\0\u0605\0\u0605"+
    "\0\u0605\0\u26bc\0\u26ff\0\u2742\0\u0605\0\u2785\0\u27c8\0\u280b"+
    "\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a\0\u0605\0\u0605\0\u299d"+
    "\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5"+
    "\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd"+
    "\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u01d5\0\u2fa2"+
    "\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u0605\0\u3134\0\u0605"+
    "\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u0605\0\u3283\0\u32c6\0\u3309"+
    "\0\u0605\0\u334c\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de"+
    "\0\u3521\0\u3564\0\u35a7\0\u0605\0\u0605\0\u35ea\0\u362d\0\u3670"+
    "\0\u36b3\0\u2a23\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845"+
    "\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a\0\u3a5d"+
    "\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u3c75"+
    "\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07\0\u0605\0\u3e4a"+
    "\0\u3e8d\0\u3ed0\0\u0605\0\u0605\0\u3f13\0\u3f56\0\u3f99\0\u3fdc"+
    "\0\u401f\0\u0605\0\u4062\0\u40a5\0\u40e8\0\u412b\0\u416e\0\u41b1"+
    "\0\u41f4\0\u4237\0\u427a\0\u42bd\0\u0605\0\u0605\0\u0605\0\u0605"+
    "\0\u0605\0\u0605\0\u0605\0\u0605\0\u0605\0\u0605\0\u0605\0\u0605"+
    "\0\u0605\0\u4300\0\u4343\0\u4386\0\u43c9\0\u440c\0\u444f\0\u4492"+
    "\0\u44d5\0\u4518\0\u455b\0\u459e\0\u45e1\0\u4624\0\u4667\0\u46aa"+
    "\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u47f9\0\u483c\0\u487f\0\u48c2"+
    "\0\u4905\0\u4948\0\u498b\0\u49ce\0\u4a11\0\u4a54\0\u4a97\0\u4ada"+
    "\0\u4b1d\0\u4b60\0\u0605\0\u01d5\0\u0605\0\u4ba3\0\u4be6\0\u4c29"+
    "\0\u4c6c\0\u4caf\0\u0605\0\u4cf2\0\u0605\0\u0605\0\u0605\0\u0605"+
    "\0\u0605\0\u0605\0\u0605\0\u0605\0\u0605\0\u4d35\0\u0605\0\u4d78"+
    "\0\u4dbb\0\u0605\0\u0605\0\u4dfe\0\u4e41\0\u4e84\0\u4ec7\0\u4f0a"+
    "\0\u4f4d\0\u4f90\0\u4fd3\0\u5016\0\u5059\0\u509c\0\u0605\0\u50df"+
    "\0\u0605\0\u5122\0\u5165\0\u51a8\0\u51eb\0\u522e\0\u5271\0\u52b4"+
    "\0\u52f7\0\u533a\0\u537d\0\u53c0\0\u5403\0\u5446\0\u5489\0\u54cc"+
    "\0\u550f\0\u5552\0\u5595\0\u55d8\0\u561b\0\u565e\0\u56a1\0\u0605"+
    "\0\u56e4\0\u0605\0\u0605\0\u5727\0\u576a\0\u57ad\0\u57f0\0\u5833"+
    "\0\u5876\0\u58b9\0\u0605\0\u58fc\0\u593f\0\u0605\0\u0605\0\u5982"+
    "\0\u0605\0\u0605\0\u0605\0\u0605\0\u59c5\0\u5a08\0\u5a4b\0\u5a8e"+
    "\0\u5ad1\0\u5b14\0\u5b57\0\u5b9a\0\u0605\0\u5bdd\0\u0605\0\u5c20"+
    "\0\u5c63\0\u5ca6\0\u5ce9\0\u5d2c\0\u5d6f\0\u5db2\0\u5df5\0\u5e38"+
    "\0\u5e7b\0\u5ebe\0\u5f01\0\u0605\0\u0605\0\u5f44\0\u5f87\0\u0605"+
    "\0\u5fca\0\u600d\0\u0605\0\u6050\0\u6093\0\u60d6\0\u6119\0\u0605"+
    "\0\u615c\0\u0605\0\u0605\0\u619f\0\u61e2\0\u6225\0\u0605\0\u0605"+
    "\0\u6268\0\u0605\0\u0605\0\u0605\0\u0605\0\u62ab\0\u62ee\0\u6331"+
    "\0\u6374\0\u63b7\0\u63fa\0\u643d\0\u6480\0\u64c3\0\u6506\0\u6549"+
    "\0\u658c\0\u65cf\0\u6612\0\u6655\0\u6698\0\u66db\0\u671e\0\u6761"+
    "\0\u67a4\0\u67e7\0\u682a\0\u686d\0\u68b0\0\u68f3\0\u6936\0\u6979"+
    "\0\u69bc\0\u0605\0\u0605\0\u69ff\0\u6a42\0\u6a85\0\u6ac8\0\u6b0b"+
    "\0\u6b4e\0\u6b91\0\u0605\0\u6bd4\0\u0605\0\u6c17\0\u0605\0\u6c5a"+
    "\0\u0605\0\u6c9d\0\u6ce0\0\u6d23\0\u0605\0\u6d66\0\u0605\0\u6da9"+
    "\0\u6dec\0\u6e2f\0\u6e72\0\u6eb5\0\u6ef8\0\u0605\0\u6f3b\0\u6f7e"+
    "\0\u6fc1\0\u0605\0\u0605\0\u7004\0\u0605\0\u0605\0\u0605\0\u7047"+
    "\0\u708a\0\u0605\0\u70cd\0\u7110\0\u7153\0\u7196\0\u71d9\0\u721c"+
    "\0\u725f\0\u72a2\0\u72e5\0\u7328\0\u736b\0\u0605\0\u0605\0\u73ae"+
    "\0\u73f1\0\u7434\0\u0605\0\u7477\0\u74ba\0\u74fd\0\u7540\0\u7583"+
    "\0\u75c6\0\u7609\0\u0605\0\u0605\0\u764c\0\u0605\0\u768f\0\u76d2"+
    "\0\u7715\0\u7758\0\u779b\0\u77de\0\u7821\0\u0605\0\u7864\0\u78a7"+
    "\0\u78ea\0\u792d\0\u7970\0\u79b3\0\u79f6\0\u7a39\0\u7a7c\0\u7abf"+
    "\0\u7b02\0\u7b45\0\u7b88\0\u7bcb\0\u7c0e\0\u7c51\0\u7c94\0\u0605"+
    "\0\u0605\0\u7cd7\0\u0605\0\u7d1a\0\u7d5d\0\u7da0\0\u7de3\0\u7e26"+
    "\0\u7e69\0\u7eac\0\u7eef\0\u7f32\0\u7f75\0\u7fb8\0\u7ffb\0\u803e"+
    "\0\u8081\0\u80c4\0\u0605\0\u0605\0\u8107\0\u814a\0\u818d\0\u81d0"+
    "\0\u0605\0\u8213\0\u0605\0\u8256\0\u8299\0\u82dc\0\u831f\0\u8362"+
    "\0\u83a5\0\u83e8\0\u842b\0\u846e\0\u84b1\0\u84f4\0\u8537\0\u857a"+
    "\0\u85bd\0\u8600\0\u0605\0\u8643\0\u8686\0\u86c9\0\u870c\0\u874f"+
    "\0\u8792\0\u0605\0\u87d5\0\u0605\0\u8818\0\u0605\0\u885b\0\u889e"+
    "\0\u88e1\0\u8924\0\u0605";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[683];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\11\1\13\1\10\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\7\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\5\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\2\36\1\51\1\36\1\52\1\53"+
    "\1\36\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\2\36\1\64\1\65\1\66\1\67\2\10\1\70"+
    "\1\71\1\70\1\13\1\72\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\7\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\5\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\2\36\1\51\1\36\1\52\1\53\1\36\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\2\36"+
    "\1\64\1\65\1\66\1\67\2\10\1\11\1\12\1\11"+
    "\4\10\1\73\3\10\1\22\1\74\1\10\1\75\1\76"+
    "\7\77\1\100\1\10\1\101\1\102\1\103\1\10\5\36"+
    "\3\10\1\104\1\105\1\106\3\36\1\107\2\36\1\110"+
    "\2\36\1\53\2\36\1\111\1\112\1\113\1\36\1\114"+
    "\1\115\1\116\2\36\6\10\1\11\1\12\1\11\10\10"+
    "\1\22\1\74\1\10\1\75\1\76\7\77\2\10\1\101"+
    "\1\10\1\103\1\10\5\36\3\10\1\104\1\105\1\117"+
    "\3\36\1\120\2\36\1\110\2\36\1\53\2\36\1\55"+
    "\2\36\1\121\1\61\1\115\3\36\6\10\1\11\1\12"+
    "\1\11\4\10\1\16\1\17\2\10\1\22\1\122\1\123"+
    "\1\75\1\26\7\27\6\10\5\36\1\10\1\124\1\10"+
    "\1\104\5\36\1\125\13\36\1\126\5\36\5\10\2\127"+
    "\1\130\1\10\37\127\1\131\1\132\31\127\1\133\1\127"+
    "\1\132\1\127\1\10\2\127\1\12\1\10\37\127\1\131"+
    "\1\132\31\127\1\133\1\127\1\132\1\127\1\10\104\0"+
    "\1\11\1\0\1\11\101\0\1\12\133\0\1\134\102\0"+
    "\1\135\56\0\1\136\23\0\1\137\102\0\1\140\62\0"+
    "\1\141\17\0\1\142\64\0\1\143\1\144\1\0\1\145"+
    "\7\146\3\0\1\147\1\150\66\0\10\151\65\0\1\152"+
    "\4\0\1\153\13\0\1\154\65\0\1\151\1\0\10\155"+
    "\10\0\1\156\12\0\1\156\15\0\1\157\2\0\1\160"+
    "\24\0\1\151\1\0\10\27\10\0\1\156\12\0\1\156"+
    "\15\0\1\157\43\0\1\161\1\162\102\0\1\163\102\0"+
    "\1\164\1\165\66\0\10\36\6\0\5\36\3\0\30\36"+
    "\50\0\1\166\72\0\1\167\67\0\10\36\6\0\5\36"+
    "\3\0\20\36\1\170\1\36\1\171\5\36\25\0\10\36"+
    "\6\0\5\36\3\0\11\36\1\172\4\36\1\173\1\36"+
    "\1\174\7\36\25\0\10\36\6\0\5\36\3\0\1\36"+
    "\1\175\14\36\1\176\11\36\25\0\10\36\6\0\5\36"+
    "\3\0\5\36\1\177\3\36\1\200\16\36\25\0\10\36"+
    "\6\0\5\36\3\0\13\36\1\201\1\36\1\202\12\36"+
    "\25\0\3\36\1\203\4\36\6\0\5\36\3\0\1\36"+
    "\1\204\13\36\1\205\1\206\11\36\25\0\3\36\1\207"+
    "\4\36\6\0\5\36\3\0\6\36\1\210\21\36\25\0"+
    "\10\36\6\0\5\36\3\0\5\36\1\211\10\36\1\212"+
    "\11\36\25\0\10\36\6\0\5\36\3\0\1\36\1\213"+
    "\26\36\25\0\10\36\6\0\5\36\3\0\24\36\1\214"+
    "\3\36\25\0\10\36\6\0\5\36\3\0\22\36\1\215"+
    "\5\36\25\0\10\36\6\0\5\36\3\0\5\36\1\216"+
    "\22\36\25\0\10\36\6\0\5\36\3\0\1\36\1\217"+
    "\20\36\1\220\2\36\1\221\2\36\25\0\10\36\6\0"+
    "\5\36\3\0\5\36\1\222\12\36\1\223\6\36\1\224"+
    "\25\0\3\36\1\225\4\36\6\0\5\36\3\0\30\36"+
    "\25\0\10\36\6\0\5\36\3\0\1\36\1\226\3\36"+
    "\1\227\22\36\25\0\10\36\6\0\5\36\3\0\10\36"+
    "\1\230\17\36\40\0\1\231\43\0\1\232\4\0\1\70"+
    "\1\233\1\70\1\0\1\234\76\0\1\233\1\71\1\233"+
    "\1\0\1\234\75\0\2\235\1\0\40\235\1\0\32\235"+
    "\1\0\4\235\20\0\1\236\7\237\65\0\1\152\4\0"+
    "\1\153\154\0\1\157\2\0\1\240\26\0\10\77\41\0"+
    "\1\157\31\0\10\36\6\0\5\36\3\0\22\36\1\171"+
    "\5\36\25\0\10\36\6\0\5\36\3\0\7\36\1\241"+
    "\6\36\1\173\11\36\25\0\3\36\1\203\4\36\6\0"+
    "\5\36\3\0\23\36\1\242\4\36\25\0\3\36\1\207"+
    "\4\36\6\0\5\36\3\0\30\36\25\0\10\36\6\0"+
    "\5\36\3\0\20\36\1\243\1\36\1\215\1\244\4\36"+
    "\25\0\1\36\1\245\1\36\1\246\3\36\1\247\6\0"+
    "\5\36\3\0\5\36\1\250\1\36\1\251\20\36\25\0"+
    "\10\36\6\0\5\36\3\0\22\36\1\252\5\36\25\0"+
    "\3\36\1\225\4\36\6\0\5\36\3\0\15\36\1\253"+
    "\12\36\25\0\10\36\6\0\5\36\3\0\5\36\1\227"+
    "\22\36\25\0\10\36\6\0\5\36\3\0\16\36\1\254"+
    "\1\36\1\255\7\36\25\0\10\36\6\0\5\36\3\0"+
    "\16\36\1\173\11\36\25\0\3\36\1\203\4\36\6\0"+
    "\5\36\3\0\30\36\25\0\10\36\6\0\5\36\3\0"+
    "\5\36\1\222\22\36\23\0\1\144\1\0\1\145\7\146"+
    "\117\0\1\256\56\0\10\36\6\0\5\36\3\0\1\36"+
    "\1\257\26\36\25\0\10\36\6\0\5\36\3\0\20\36"+
    "\1\223\7\36\5\0\2\127\2\0\76\127\3\0\1\130"+
    "\116\0\1\151\1\0\10\155\10\0\1\156\12\0\1\156"+
    "\20\0\1\260\24\0\1\151\1\0\10\146\10\0\1\156"+
    "\12\0\1\156\47\0\10\151\10\0\1\156\12\0\1\156"+
    "\1\261\26\0\12\152\1\262\70\152\2\153\1\0\100\153"+
    "\16\0\1\151\1\0\10\155\10\0\1\156\12\0\1\156"+
    "\42\0\1\263\1\0\1\263\2\0\10\264\71\0\1\265"+
    "\1\0\10\266\6\0\3\266\6\0\6\266\61\0\1\267"+
    "\102\0\1\270\67\0\10\36\6\0\5\36\3\0\20\36"+
    "\1\271\7\36\25\0\10\36\6\0\5\36\3\0\16\36"+
    "\1\272\11\36\25\0\10\36\6\0\5\36\3\0\15\36"+
    "\1\273\4\36\1\274\5\36\25\0\10\36\6\0\5\36"+
    "\3\0\16\36\1\275\11\36\25\0\10\36\6\0\5\36"+
    "\3\0\5\36\1\276\22\36\25\0\10\36\6\0\5\36"+
    "\3\0\21\36\1\277\6\36\25\0\10\36\6\0\5\36"+
    "\3\0\15\36\1\300\12\36\25\0\10\36\6\0\5\36"+
    "\3\0\6\36\1\301\21\36\25\0\10\36\6\0\5\36"+
    "\3\0\21\36\1\302\6\36\25\0\10\36\6\0\5\36"+
    "\3\0\21\36\1\303\6\36\25\0\10\36\6\0\5\36"+
    "\3\0\1\36\1\304\26\36\25\0\2\36\1\305\5\36"+
    "\6\0\5\36\3\0\30\36\25\0\10\36\6\0\5\36"+
    "\3\0\13\36\1\306\14\36\25\0\10\36\6\0\5\36"+
    "\3\0\20\36\1\307\7\36\25\0\2\36\1\310\5\36"+
    "\6\0\5\36\3\0\30\36\25\0\10\36\6\0\5\36"+
    "\3\0\22\36\1\311\5\36\25\0\10\36\6\0\5\36"+
    "\3\0\16\36\1\312\11\36\25\0\10\36\6\0\5\36"+
    "\3\0\22\36\1\313\5\36\25\0\10\36\6\0\5\36"+
    "\3\0\5\36\1\314\22\36\25\0\10\36\6\0\5\36"+
    "\3\0\20\36\1\315\7\36\25\0\10\36\6\0\5\36"+
    "\3\0\22\36\1\316\5\36\25\0\10\36\6\0\5\36"+
    "\3\0\14\36\1\317\13\36\25\0\10\36\6\0\5\36"+
    "\3\0\1\36\1\320\16\36\1\321\7\36\25\0\10\36"+
    "\6\0\5\36\3\0\11\36\1\322\16\36\25\0\10\36"+
    "\6\0\5\36\3\0\26\36\1\323\1\36\25\0\10\36"+
    "\6\0\5\36\3\0\23\36\1\324\4\36\25\0\10\36"+
    "\6\0\5\36\3\0\17\36\1\325\10\36\25\0\2\36"+
    "\1\326\5\36\6\0\5\36\3\0\30\36\25\0\10\36"+
    "\6\0\5\36\3\0\20\36\1\327\7\36\25\0\10\36"+
    "\6\0\5\36\3\0\3\36\1\330\24\36\25\0\10\36"+
    "\6\0\5\36\3\0\11\36\1\331\16\36\6\0\3\233"+
    "\1\0\1\234\171\0\1\332\26\0\10\237\73\0\10\333"+
    "\6\0\3\333\6\0\6\333\46\0\10\36\6\0\5\36"+
    "\3\0\20\36\1\334\7\36\25\0\10\36\6\0\5\36"+
    "\3\0\15\36\1\335\12\36\25\0\10\36\6\0\5\36"+
    "\3\0\11\36\1\336\16\36\25\0\10\36\6\0\5\36"+
    "\3\0\21\36\1\337\6\36\25\0\6\36\1\340\1\36"+
    "\6\0\5\36\3\0\30\36\25\0\2\36\1\341\5\36"+
    "\6\0\5\36\3\0\30\36\25\0\10\36\6\0\5\36"+
    "\3\0\21\36\1\342\1\36\1\343\4\36\25\0\10\36"+
    "\6\0\5\36\3\0\1\36\1\344\26\36\25\0\1\36"+
    "\1\345\1\36\1\346\3\36\1\347\6\0\5\36\3\0"+
    "\2\36\1\350\25\36\25\0\10\36\6\0\5\36\3\0"+
    "\16\36\1\351\11\36\25\0\10\36\6\0\5\36\3\0"+
    "\11\36\1\352\16\36\25\0\10\36\6\0\5\36\3\0"+
    "\20\36\1\353\7\36\25\0\10\36\6\0\5\36\3\0"+
    "\11\36\1\354\16\36\25\0\10\36\6\0\5\36\3\0"+
    "\13\36\1\355\14\36\23\0\1\265\1\0\10\356\6\0"+
    "\3\356\6\0\6\356\26\0\12\152\1\262\4\152\1\357"+
    "\63\152\20\0\10\264\73\0\10\264\24\0\1\261\46\0"+
    "\10\360\6\0\3\360\6\0\6\360\44\0\1\360\1\0"+
    "\10\266\6\0\3\266\1\0\1\361\4\0\6\266\10\0"+
    "\1\361\3\0\1\157\31\0\10\36\6\0\5\36\3\0"+
    "\1\36\1\362\26\36\25\0\10\36\6\0\5\36\3\0"+
    "\14\36\1\363\13\36\25\0\10\36\6\0\5\36\3\0"+
    "\4\36\1\364\23\36\25\0\10\36\6\0\5\36\3\0"+
    "\3\36\1\365\24\36\25\0\10\36\6\0\5\36\3\0"+
    "\13\36\1\366\14\36\25\0\10\36\6\0\5\36\3\0"+
    "\1\36\1\367\26\36\25\0\10\36\6\0\5\36\3\0"+
    "\5\36\1\370\22\36\25\0\10\36\6\0\5\36\3\0"+
    "\21\36\1\371\1\372\5\36\25\0\10\36\6\0\5\36"+
    "\3\0\1\36\1\373\26\36\25\0\10\36\6\0\5\36"+
    "\3\0\3\36\1\374\24\36\25\0\10\36\6\0\5\36"+
    "\3\0\5\36\1\375\22\36\25\0\10\36\6\0\5\36"+
    "\3\0\2\36\1\376\25\36\25\0\10\36\6\0\5\36"+
    "\3\0\13\36\1\377\5\36\1\u0100\6\36\25\0\10\36"+
    "\6\0\5\36\3\0\17\36\1\u0101\10\36\25\0\2\36"+
    "\1\u0102\1\u0103\1\u0104\3\36\6\0\5\36\3\0\30\36"+
    "\25\0\10\36\6\0\5\36\3\0\20\36\1\u0105\7\36"+
    "\25\0\10\36\6\0\5\36\3\0\23\36\1\u0106\4\36"+
    "\25\0\10\36\6\0\5\36\3\0\17\36\1\u0107\10\36"+
    "\25\0\10\36\6\0\5\36\3\0\22\36\1\u0108\5\36"+
    "\25\0\10\36\6\0\5\36\3\0\23\36\1\u0109\4\36"+
    "\25\0\10\36\6\0\5\36\3\0\22\36\1\u010a\5\36"+
    "\25\0\10\36\6\0\5\36\3\0\22\36\1\u010b\5\36"+
    "\25\0\10\36\6\0\5\36\3\0\5\36\1\u010c\22\36"+
    "\25\0\10\36\6\0\5\36\3\0\5\36\1\u010d\22\36"+
    "\25\0\2\36\1\u010e\1\u010f\1\u0110\3\36\6\0\5\36"+
    "\3\0\30\36\25\0\10\36\6\0\5\36\3\0\13\36"+
    "\1\u0111\14\36\25\0\10\u0112\6\0\3\u0112\6\0\6\u0112"+
    "\46\0\10\333\6\0\3\333\6\0\6\333\14\0\1\157"+
    "\31\0\10\36\6\0\5\36\3\0\1\36\1\u0113\26\36"+
    "\25\0\10\36\6\0\5\36\3\0\3\36\1\u0114\24\36"+
    "\25\0\10\36\6\0\5\36\3\0\24\36\1\u0115\3\36"+
    "\25\0\10\36\6\0\5\36\3\0\10\36\1\u0116\17\36"+
    "\25\0\10\36\6\0\5\36\3\0\6\36\1\u0117\12\36"+
    "\1\u0118\1\36\1\u0119\4\36\25\0\10\36\6\0\5\36"+
    "\3\0\6\36\1\u011a\12\36\1\u011b\1\36\1\u011c\4\36"+
    "\25\0\10\36\6\0\5\36\3\0\11\36\1\u011d\3\36"+
    "\1\u011e\12\36\25\0\10\36\6\0\5\36\3\0\11\36"+
    "\1\u011f\3\36\1\u0120\12\36\25\0\10\36\6\0\5\36"+
    "\3\0\4\36\1\u0121\23\36\25\0\1\36\1\u0122\4\36"+
    "\1\u0123\1\36\6\0\5\36\3\0\30\36\25\0\2\36"+
    "\1\u0124\5\36\6\0\5\36\3\0\30\36\25\0\10\36"+
    "\6\0\5\36\3\0\21\36\1\u0125\1\36\1\u0126\4\36"+
    "\25\0\1\36\1\u0127\6\36\6\0\5\36\3\0\1\36"+
    "\1\u0128\26\36\25\0\10\36\6\0\5\36\3\0\20\36"+
    "\1\u0129\7\36\25\0\10\36\6\0\5\36\3\0\6\36"+
    "\1\u012a\21\36\25\0\10\36\6\0\5\36\3\0\12\36"+
    "\1\u012b\15\36\25\0\10\36\6\0\5\36\3\0\22\36"+
    "\1\u012c\5\36\25\0\10\36\6\0\5\36\3\0\21\36"+
    "\1\u0100\6\36\23\0\1\360\1\0\10\356\6\0\3\356"+
    "\1\0\1\361\4\0\6\356\10\0\1\361\35\0\10\360"+
    "\6\0\3\360\1\0\1\361\4\0\6\360\10\0\1\361"+
    "\30\0\1\u012d\1\0\1\u012d\2\0\10\u012e\73\0\10\36"+
    "\6\0\5\36\3\0\27\36\1\u012f\25\0\10\36\6\0"+
    "\5\36\3\0\11\36\1\u0130\16\36\25\0\10\36\6\0"+
    "\5\36\3\0\11\36\1\u0131\16\36\25\0\10\36\6\0"+
    "\5\36\3\0\1\36\1\u0132\26\36\25\0\10\36\6\0"+
    "\5\36\3\0\12\36\1\u0133\15\36\25\0\10\36\6\0"+
    "\5\36\3\0\22\36\1\u0134\5\36\25\0\10\36\6\0"+
    "\5\36\3\0\11\36\1\u0135\16\36\25\0\10\36\6\0"+
    "\5\36\3\0\23\36\1\u0136\4\36\25\0\10\36\6\0"+
    "\5\36\3\0\1\36\1\u0137\26\36\25\0\10\36\6\0"+
    "\5\36\3\0\13\36\1\u0138\14\36\25\0\10\36\6\0"+
    "\5\36\3\0\22\36\1\u0139\5\36\25\0\10\36\6\0"+
    "\5\36\3\0\5\36\1\u013a\22\36\25\0\10\36\6\0"+
    "\5\36\3\0\26\36\1\u013b\1\36\25\0\10\36\6\0"+
    "\5\36\3\0\26\36\1\u013c\1\36\25\0\10\36\6\0"+
    "\5\36\3\0\26\36\1\u013d\1\36\25\0\10\36\6\0"+
    "\5\36\3\0\20\36\1\u013e\7\36\25\0\10\36\6\0"+
    "\5\36\3\0\20\36\1\u013f\7\36\25\0\10\36\6\0"+
    "\5\36\3\0\13\36\1\u0140\14\36\25\0\10\36\6\0"+
    "\5\36\3\0\11\36\1\u0141\16\36\25\0\10\36\6\0"+
    "\5\36\3\0\3\36\1\u0142\24\36\25\0\10\36\6\0"+
    "\5\36\3\0\3\36\1\u0143\24\36\25\0\10\36\6\0"+
    "\5\36\3\0\23\36\1\u0144\4\36\25\0\10\36\6\0"+
    "\5\36\3\0\6\36\1\u0145\1\36\1\u0146\1\u0147\11\36"+
    "\1\u0148\4\36\25\0\10\36\6\0\5\36\3\0\6\36"+
    "\1\u0149\1\36\1\u014a\1\u014b\11\36\1\u014c\4\36\25\0"+
    "\10\36\6\0\5\36\3\0\6\36\1\u014d\1\36\1\u014e"+
    "\1\u014f\11\36\1\u0150\4\36\25\0\10\36\6\0\5\36"+
    "\3\0\5\36\1\u0151\22\36\25\0\7\36\1\u0152\6\0"+
    "\5\36\3\0\30\36\25\0\10\36\6\0\5\36\3\0"+
    "\22\36\1\u0153\5\36\25\0\10\36\6\0\5\36\3\0"+
    "\1\36\1\u0154\26\36\25\0\10\36\6\0\5\36\3\0"+
    "\1\u0155\27\36\25\0\10\36\6\0\5\36\3\0\13\36"+
    "\1\u0156\14\36\25\0\10\36\6\0\5\36\3\0\11\36"+
    "\1\u0157\16\36\25\0\10\36\6\0\5\36\3\0\11\36"+
    "\1\u0158\16\36\25\0\10\36\6\0\5\36\3\0\13\36"+
    "\1\u0159\14\36\25\0\10\36\6\0\5\36\3\0\11\36"+
    "\1\u015a\16\36\25\0\10\36\6\0\5\36\3\0\11\36"+
    "\1\u015b\16\36\25\0\10\36\6\0\5\36\3\0\15\36"+
    "\1\u015c\12\36\25\0\10\36\6\0\5\36\3\0\16\36"+
    "\1\u015d\11\36\25\0\10\36\6\0\5\36\3\0\15\36"+
    "\1\u015e\12\36\25\0\10\36\6\0\5\36\3\0\16\36"+
    "\1\u015f\11\36\25\0\10\36\6\0\5\36\3\0\1\u0160"+
    "\27\36\25\0\10\36\6\0\5\36\3\0\2\36\1\u0161"+
    "\25\36\25\0\10\36\6\0\5\36\3\0\6\36\1\u0162"+
    "\12\36\1\u0163\1\36\1\u0164\4\36\25\0\10\36\6\0"+
    "\5\36\3\0\6\36\1\u0165\12\36\1\u0166\1\36\1\u0167"+
    "\4\36\25\0\10\36\6\0\5\36\3\0\11\36\1\u0168"+
    "\3\36\1\u0169\12\36\25\0\10\36\6\0\5\36\3\0"+
    "\11\36\1\u016a\3\36\1\u016b\12\36\25\0\1\u016c\7\36"+
    "\6\0\5\36\3\0\30\36\25\0\1\36\1\u016d\1\36"+
    "\1\u016e\3\36\1\u016f\6\0\5\36\3\0\30\36\25\0"+
    "\10\36\6\0\5\36\3\0\1\36\1\u0170\26\36\25\0"+
    "\10\36\6\0\5\36\3\0\16\36\1\u0171\11\36\25\0"+
    "\10\36\6\0\5\36\3\0\7\36\1\u0172\20\36\25\0"+
    "\10\36\6\0\5\36\3\0\5\36\1\u0173\22\36\25\0"+
    "\10\u012e\73\0\10\u012e\24\0\1\u0174\46\0\10\36\6\0"+
    "\5\36\3\0\3\36\1\u0175\24\36\25\0\10\36\6\0"+
    "\5\36\3\0\15\36\1\u0176\12\36\25\0\10\36\6\0"+
    "\5\36\3\0\21\36\1\u0177\6\36\25\0\10\36\6\0"+
    "\5\36\3\0\15\36\1\u0178\12\36\25\0\10\36\6\0"+
    "\5\36\3\0\13\36\1\u0179\14\36\25\0\10\36\6\0"+
    "\5\36\3\0\20\36\1\u017a\7\36\25\0\10\36\6\0"+
    "\5\36\3\0\5\36\1\u017b\22\36\25\0\10\36\6\0"+
    "\5\36\3\0\10\36\1\u017c\17\36\25\0\2\36\1\u017d"+
    "\1\u017e\1\u017f\3\36\6\0\5\36\3\0\30\36\25\0"+
    "\2\36\1\u0180\1\u0181\1\u0182\3\36\6\0\5\36\3\0"+
    "\30\36\25\0\2\36\1\u0183\1\u0184\1\u0185\3\36\6\0"+
    "\5\36\3\0\30\36\25\0\10\36\6\0\5\36\3\0"+
    "\11\36\1\u0186\16\36\25\0\10\36\6\0\5\36\3\0"+
    "\15\36\1\u0187\12\36\25\0\10\36\6\0\5\36\3\0"+
    "\5\36\1\u0188\22\36\25\0\10\36\6\0\5\36\3\0"+
    "\3\36\1\u0189\24\36\25\0\10\36\6\0\5\36\3\0"+
    "\22\36\1\u018a\5\36\25\0\10\36\6\0\5\36\3\0"+
    "\10\36\1\u018b\17\36\25\0\10\36\6\0\5\36\3\0"+
    "\20\36\1\u018c\7\36\25\0\10\36\6\0\5\36\3\0"+
    "\23\36\1\u018d\4\36\25\0\10\36\6\0\5\36\3\0"+
    "\11\36\1\u018e\16\36\25\0\10\36\6\0\5\36\3\0"+
    "\22\36\1\u018f\5\36\25\0\10\36\6\0\5\36\3\0"+
    "\3\36\1\u0190\24\36\25\0\10\36\6\0\5\36\3\0"+
    "\16\36\1\u0191\11\36\25\0\10\36\6\0\5\36\3\0"+
    "\15\36\1\u0192\12\36\25\0\10\36\6\0\5\36\3\0"+
    "\15\36\1\u0193\12\36\25\0\10\36\6\0\5\36\3\0"+
    "\16\36\1\u0194\11\36\25\0\10\36\6\0\5\36\3\0"+
    "\15\36\1\u0195\12\36\25\0\10\36\6\0\5\36\3\0"+
    "\15\36\1\u0196\12\36\25\0\10\36\6\0\5\36\3\0"+
    "\22\36\1\u0197\5\36\25\0\10\36\6\0\5\36\3\0"+
    "\20\36\1\u0198\7\36\25\0\10\36\6\0\5\36\3\0"+
    "\22\36\1\u0199\5\36\25\0\10\36\6\0\5\36\3\0"+
    "\20\36\1\u019a\7\36\25\0\10\36\6\0\5\36\3\0"+
    "\25\36\1\u019b\2\36\25\0\1\36\1\u019c\6\36\6\0"+
    "\5\36\3\0\30\36\25\0\10\36\6\0\5\36\3\0"+
    "\13\36\1\u019d\14\36\25\0\10\36\6\0\5\36\3\0"+
    "\11\36\1\u019e\16\36\25\0\10\36\6\0\5\36\3\0"+
    "\11\36\1\u019f\16\36\25\0\10\36\6\0\5\36\3\0"+
    "\13\36\1\u01a0\14\36\25\0\10\36\6\0\5\36\3\0"+
    "\11\36\1\u01a1\16\36\25\0\10\36\6\0\5\36\3\0"+
    "\11\36\1\u01a2\16\36\25\0\10\36\6\0\5\36\3\0"+
    "\15\36\1\u01a3\12\36\25\0\10\36\6\0\5\36\3\0"+
    "\16\36\1\u01a4\11\36\25\0\10\36\6\0\5\36\3\0"+
    "\15\36\1\u01a5\12\36\25\0\10\36\6\0\5\36\3\0"+
    "\16\36\1\u01a6\11\36\25\0\10\36\6\0\5\36\3\0"+
    "\1\36\1\u01a7\26\36\25\0\6\36\1\u01a8\1\36\6\0"+
    "\5\36\3\0\30\36\25\0\2\36\1\u01a9\5\36\6\0"+
    "\5\36\3\0\30\36\25\0\10\36\6\0\5\36\3\0"+
    "\21\36\1\u01aa\1\36\1\u01ab\4\36\25\0\10\36\6\0"+
    "\5\36\3\0\7\36\1\u01ac\20\36\25\0\10\36\6\0"+
    "\5\36\3\0\20\36\1\u01ad\7\36\25\0\10\36\6\0"+
    "\5\36\3\0\20\36\1\u01ae\7\36\25\0\10\36\6\0"+
    "\5\36\3\0\7\36\1\u01af\20\36\25\0\10\36\6\0"+
    "\5\36\3\0\22\36\1\u01b0\5\36\25\0\10\36\6\0"+
    "\5\36\3\0\23\36\1\u01b1\4\36\25\0\10\36\6\0"+
    "\5\36\3\0\22\36\1\u01b2\5\36\25\0\10\36\6\0"+
    "\5\36\3\0\4\36\1\u01b3\23\36\25\0\10\36\6\0"+
    "\5\36\3\0\20\36\1\u01b4\7\36\25\0\10\36\6\0"+
    "\5\36\3\0\4\36\1\u01b5\23\36\25\0\10\36\6\0"+
    "\5\36\3\0\20\36\1\u01b6\7\36\25\0\10\36\6\0"+
    "\1\u01b7\4\36\3\0\30\36\25\0\10\36\6\0\5\36"+
    "\3\0\5\36\1\u01b8\22\36\25\0\10\36\6\0\5\36"+
    "\3\0\15\36\1\u01b9\12\36\25\0\10\36\6\0\5\36"+
    "\3\0\16\36\1\u01ba\11\36\25\0\10\36\6\0\5\36"+
    "\3\0\5\36\1\u01bb\22\36\25\0\10\36\6\0\5\36"+
    "\3\0\16\36\1\u01bc\11\36\25\0\10\36\6\0\5\36"+
    "\3\0\1\36\1\u01bd\26\36\25\0\10\36\6\0\5\36"+
    "\3\0\22\36\1\u01be\5\36\25\0\10\36\6\0\5\36"+
    "\3\0\22\36\1\u01bf\5\36\25\0\10\36\6\0\5\36"+
    "\3\0\1\36\1\u01c0\26\36\25\0\10\36\6\0\5\36"+
    "\3\0\22\36\1\u01c1\5\36\25\0\10\36\6\0\5\36"+
    "\3\0\22\36\1\u01c2\5\36\25\0\10\36\6\0\5\36"+
    "\3\0\14\36\1\u01c3\13\36\25\0\10\36\6\0\5\36"+
    "\3\0\14\36\1\u01c4\13\36\25\0\10\36\6\0\5\36"+
    "\3\0\20\36\1\u01c5\7\36\25\0\1\u01c6\7\36\6\0"+
    "\5\36\3\0\30\36\25\0\10\36\6\0\5\36\3\0"+
    "\16\36\1\u01c7\11\36\25\0\10\36\6\0\5\36\3\0"+
    "\15\36\1\u01c8\12\36\25\0\10\36\6\0\5\36\3\0"+
    "\15\36\1\u01c9\12\36\25\0\10\36\6\0\5\36\3\0"+
    "\16\36\1\u01ca\11\36\25\0\10\36\6\0\5\36\3\0"+
    "\15\36\1\u01cb\12\36\25\0\10\36\6\0\5\36\3\0"+
    "\15\36\1\u01cc\12\36\25\0\10\36\6\0\5\36\3\0"+
    "\22\36\1\u01cd\5\36\25\0\10\36\6\0\5\36\3\0"+
    "\20\36\1\u01ce\7\36\25\0\10\36\6\0\5\36\3\0"+
    "\22\36\1\u01cf\5\36\25\0\10\36\6\0\5\36\3\0"+
    "\20\36\1\u01d0\7\36\25\0\2\36\1\u01d1\5\36\6\0"+
    "\5\36\3\0\30\36\25\0\10\36\6\0\5\36\3\0"+
    "\6\36\1\u01d2\12\36\1\u01d3\1\36\1\u01d4\4\36\25\0"+
    "\10\36\6\0\5\36\3\0\6\36\1\u01d5\12\36\1\u01d6"+
    "\1\36\1\u01d7\4\36\25\0\10\36\6\0\5\36\3\0"+
    "\11\36\1\u01d8\3\36\1\u01d9\12\36\25\0\10\36\6\0"+
    "\5\36\3\0\11\36\1\u01da\3\36\1\u01db\12\36\25\0"+
    "\10\36\6\0\5\36\3\0\5\36\1\u01dc\22\36\25\0"+
    "\10\36\6\0\5\36\3\0\14\36\1\u01dd\13\36\25\0"+
    "\10\36\6\0\5\36\3\0\16\36\1\u01de\11\36\25\0"+
    "\10\36\6\0\5\36\3\0\1\u01df\27\36\25\0\10\36"+
    "\6\0\5\36\3\0\5\36\1\u01e0\3\36\1\u01e1\16\36"+
    "\25\0\10\36\6\0\5\36\3\0\16\36\1\u01e2\11\36"+
    "\25\0\10\36\6\0\5\36\3\0\5\36\1\u01e3\22\36"+
    "\25\0\10\36\6\0\5\36\3\0\1\u01e4\27\36\25\0"+
    "\10\36\6\0\5\36\3\0\21\36\1\u01e5\6\36\25\0"+
    "\10\36\6\0\5\36\3\0\1\u01e6\27\36\25\0\10\36"+
    "\6\0\5\36\3\0\16\36\1\u01e7\11\36\25\0\10\36"+
    "\6\0\5\36\3\0\15\36\1\u01e8\12\36\25\0\10\36"+
    "\6\0\5\36\3\0\15\36\1\u01e9\12\36\25\0\10\36"+
    "\6\0\5\36\3\0\22\36\1\u01ea\5\36\25\0\10\36"+
    "\6\0\5\36\3\0\22\36\1\u01eb\5\36\25\0\10\36"+
    "\6\0\5\36\3\0\11\36\1\u01ec\16\36\25\0\10\36"+
    "\6\0\5\36\3\0\6\36\1\u01ed\21\36\25\0\10\36"+
    "\6\0\5\36\3\0\1\36\1\u01ee\26\36\25\0\10\36"+
    "\6\0\5\36\3\0\22\36\1\u01ef\5\36\25\0\10\36"+
    "\6\0\5\36\3\0\22\36\1\u01f0\5\36\25\0\10\36"+
    "\6\0\5\36\3\0\1\36\1\u01f1\26\36\25\0\10\36"+
    "\6\0\5\36\3\0\22\36\1\u01f2\5\36\25\0\10\36"+
    "\6\0\5\36\3\0\22\36\1\u01f3\5\36\25\0\10\36"+
    "\6\0\5\36\3\0\14\36\1\u01f4\13\36\25\0\10\36"+
    "\6\0\5\36\3\0\14\36\1\u01f5\13\36\25\0\10\36"+
    "\6\0\5\36\3\0\23\36\1\u01f6\4\36\25\0\10\36"+
    "\6\0\5\36\3\0\13\36\1\u01f7\14\36\25\0\10\36"+
    "\6\0\5\36\3\0\11\36\1\u01f8\16\36\25\0\10\36"+
    "\6\0\5\36\3\0\11\36\1\u01f9\16\36\25\0\10\36"+
    "\6\0\5\36\3\0\13\36\1\u01fa\14\36\25\0\10\36"+
    "\6\0\5\36\3\0\11\36\1\u01fb\16\36\25\0\10\36"+
    "\6\0\5\36\3\0\11\36\1\u01fc\16\36\25\0\10\36"+
    "\6\0\5\36\3\0\15\36\1\u01fd\12\36\25\0\10\36"+
    "\6\0\5\36\3\0\16\36\1\u01fe\11\36\25\0\10\36"+
    "\6\0\5\36\3\0\15\36\1\u01ff\12\36\25\0\10\36"+
    "\6\0\5\36\3\0\16\36\1\u0200\11\36\25\0\10\36"+
    "\6\0\5\36\3\0\23\36\1\u0201\4\36\25\0\10\36"+
    "\6\0\5\36\3\0\1\36\1\u0202\26\36\25\0\10\36"+
    "\6\0\5\36\3\0\15\36\1\u0203\12\36\25\0\10\36"+
    "\6\0\5\36\3\0\23\36\1\u0204\4\36\25\0\10\36"+
    "\6\0\5\36\3\0\3\36\1\u0205\24\36\25\0\10\36"+
    "\6\0\5\36\3\0\21\36\1\u0206\6\36\25\0\1\36"+
    "\1\u0207\1\u0208\1\u0209\4\36\6\0\5\36\3\0\3\36"+
    "\1\u020a\1\u020b\7\36\1\u020c\4\36\1\u020d\6\36\25\0"+
    "\10\36\6\0\5\36\3\0\20\36\1\u020e\7\36\25\0"+
    "\10\36\6\0\5\36\3\0\21\36\1\u020f\6\36\25\0"+
    "\10\36\6\0\5\36\3\0\22\36\1\u0210\5\36\25\0"+
    "\10\36\6\0\5\36\3\0\13\36\1\u0211\14\36\25\0"+
    "\10\36\6\0\5\36\3\0\22\36\1\u0212\5\36\25\0"+
    "\10\36\6\0\5\36\3\0\22\36\1\u0213\5\36\25\0"+
    "\10\36\6\0\5\36\3\0\15\36\1\u0214\12\36\25\0"+
    "\10\36\6\0\5\36\3\0\16\36\1\u0215\11\36\25\0"+
    "\10\36\6\0\5\36\3\0\15\36\1\u0216\12\36\25\0"+
    "\10\36\6\0\5\36\3\0\15\36\1\u0217\12\36\25\0"+
    "\10\36\6\0\5\36\3\0\16\36\1\u0218\11\36\25\0"+
    "\10\36\6\0\5\36\3\0\15\36\1\u0219\12\36\25\0"+
    "\10\36\6\0\5\36\3\0\15\36\1\u021a\12\36\25\0"+
    "\10\36\6\0\5\36\3\0\22\36\1\u021b\5\36\25\0"+
    "\10\36\6\0\5\36\3\0\20\36\1\u021c\7\36\25\0"+
    "\10\36\6\0\5\36\3\0\22\36\1\u021d\5\36\25\0"+
    "\10\36\6\0\5\36\3\0\20\36\1\u021e\7\36\25\0"+
    "\10\36\6\0\5\36\3\0\17\36\1\u021f\10\36\25\0"+
    "\10\36\6\0\5\36\3\0\20\36\1\u0220\7\36\25\0"+
    "\10\36\6\0\5\36\3\0\7\36\1\u0221\20\36\25\0"+
    "\10\36\6\0\5\36\3\0\7\36\1\u0222\20\36\25\0"+
    "\10\36\6\0\5\36\3\0\16\36\1\u0223\11\36\25\0"+
    "\10\36\6\0\5\36\3\0\5\36\1\u0224\22\36\25\0"+
    "\10\36\6\0\5\36\3\0\4\36\1\u0225\23\36\25\0"+
    "\10\36\6\0\5\36\3\0\4\36\1\u0226\23\36\25\0"+
    "\10\36\6\0\5\36\3\0\4\36\1\u0227\23\36\25\0"+
    "\10\36\6\0\5\36\3\0\23\36\1\u0228\4\36\25\0"+
    "\10\36\6\0\5\36\3\0\5\36\1\u0229\22\36\25\0"+
    "\10\36\6\0\5\36\3\0\23\36\1\u022a\4\36\25\0"+
    "\10\36\6\0\5\36\3\0\22\36\1\u022b\5\36\25\0"+
    "\10\36\6\0\5\36\3\0\14\36\1\u022c\13\36\25\0"+
    "\10\36\6\0\5\36\3\0\22\36\1\u022d\5\36\25\0"+
    "\10\36\6\0\5\36\3\0\5\36\1\u022e\22\36\25\0"+
    "\10\36\6\0\5\36\3\0\16\36\1\u022f\11\36\25\0"+
    "\10\36\6\0\5\36\3\0\16\36\1\u0230\11\36\25\0"+
    "\10\36\6\0\5\36\3\0\1\36\1\u0231\26\36\25\0"+
    "\10\36\6\0\5\36\3\0\22\36\1\u0232\5\36\25\0"+
    "\10\36\6\0\5\36\3\0\22\36\1\u0233\5\36\25\0"+
    "\10\36\6\0\5\36\3\0\1\36\1\u0234\26\36\25\0"+
    "\10\36\6\0\5\36\3\0\22\36\1\u0235\5\36\25\0"+
    "\10\36\6\0\5\36\3\0\22\36\1\u0236\5\36\25\0"+
    "\10\36\6\0\5\36\3\0\14\36\1\u0237\13\36\25\0"+
    "\10\36\6\0\5\36\3\0\14\36\1\u0238\13\36\25\0"+
    "\10\36\6\0\5\36\3\0\20\36\1\u0239\7\36\25\0"+
    "\10\36\6\0\5\36\3\0\10\36\1\u023a\17\36\25\0"+
    "\10\36\6\0\5\36\3\0\14\36\1\u023b\13\36\25\0"+
    "\10\36\6\0\5\36\3\0\20\36\1\u023c\7\36\25\0"+
    "\10\36\6\0\5\36\3\0\1\u023d\27\36\25\0\10\36"+
    "\6\0\5\36\3\0\2\36\1\u023e\25\36\25\0\10\36"+
    "\6\0\5\36\3\0\17\36\1\u023f\10\36\25\0\10\36"+
    "\6\0\5\36\3\0\13\36\1\u0240\14\36\25\0\10\36"+
    "\6\0\5\36\3\0\16\36\1\u0241\11\36\25\0\10\36"+
    "\6\0\5\36\3\0\1\u0242\27\36\25\0\10\36\6\0"+
    "\5\36\3\0\1\36\1\u0243\26\36\25\0\10\36\6\0"+
    "\5\36\3\0\1\36\1\u0244\26\36\25\0\10\36\6\0"+
    "\5\36\3\0\20\36\1\u0245\7\36\25\0\10\36\6\0"+
    "\5\36\3\0\22\36\1\u0246\5\36\25\0\10\36\6\0"+
    "\5\36\3\0\22\36\1\u0247\5\36\25\0\10\36\6\0"+
    "\5\36\3\0\1\u0248\27\36\25\0\10\36\6\0\5\36"+
    "\3\0\1\36\1\u0249\26\36\25\0\10\36\6\0\5\36"+
    "\3\0\17\36\1\u024a\10\36\25\0\10\36\6\0\5\36"+
    "\3\0\22\36\1\u024b\5\36\25\0\10\36\6\0\5\36"+
    "\3\0\1\36\1\u024c\26\36\25\0\10\36\6\0\5\36"+
    "\3\0\5\36\1\u024d\22\36\25\0\10\36\6\0\5\36"+
    "\3\0\22\36\1\u024e\5\36\25\0\10\36\6\0\5\36"+
    "\3\0\22\36\1\u024f\5\36\25\0\10\36\6\0\5\36"+
    "\3\0\20\36\1\u0250\7\36\25\0\10\36\6\0\5\36"+
    "\3\0\21\36\1\u0251\6\36\25\0\10\36\6\0\5\36"+
    "\3\0\15\36\1\u0252\12\36\25\0\10\36\6\0\5\36"+
    "\3\0\22\36\1\u0253\5\36\25\0\10\36\6\0\5\36"+
    "\3\0\14\36\1\u0254\13\36\25\0\10\36\6\0\5\36"+
    "\3\0\21\36\1\u0255\6\36\25\0\10\36\6\0\5\36"+
    "\3\0\27\36\1\u0256\25\0\10\36\6\0\5\36\3\0"+
    "\1\36\1\u0257\26\36\25\0\10\36\6\0\5\36\3\0"+
    "\20\36\1\u0258\7\36\25\0\10\36\6\0\5\36\3\0"+
    "\1\u0259\27\36\25\0\10\36\6\0\5\36\3\0\10\36"+
    "\1\u025a\17\36\25\0\10\36\6\0\5\36\3\0\11\36"+
    "\1\u025b\16\36\25\0\10\36\6\0\5\36\3\0\1\36"+
    "\1\u025c\26\36\25\0\10\36\6\0\5\36\3\0\20\36"+
    "\1\u025d\7\36\25\0\10\36\6\0\5\36\3\0\22\36"+
    "\1\u025e\5\36\25\0\10\36\6\0\5\36\3\0\20\36"+
    "\1\u025f\7\36\25\0\10\36\6\0\5\36\3\0\20\36"+
    "\1\u0260\7\36\25\0\10\36\6\0\5\36\3\0\20\36"+
    "\1\u0261\7\36\25\0\10\36\6\0\5\36\3\0\1\36"+
    "\1\u0262\26\36\25\0\10\36\6\0\5\36\3\0\1\u0263"+
    "\27\36\25\0\10\36\6\0\5\36\3\0\21\36\1\u0264"+
    "\6\36\25\0\10\36\6\0\5\36\3\0\7\36\1\u0265"+
    "\20\36\25\0\10\36\6\0\5\36\3\0\7\36\1\u0266"+
    "\20\36\25\0\10\36\6\0\5\36\3\0\7\36\1\u0267"+
    "\20\36\25\0\10\36\6\0\5\36\3\0\11\36\1\u0268"+
    "\16\36\25\0\10\36\6\0\5\36\3\0\1\36\1\u0269"+
    "\26\36\25\0\10\36\6\0\5\36\3\0\20\36\1\u026a"+
    "\7\36\25\0\2\36\1\u026b\5\36\6\0\5\36\3\0"+
    "\3\36\1\u026c\10\36\1\u026d\13\36\25\0\10\36\6\0"+
    "\5\36\3\0\1\36\1\u026e\26\36\25\0\10\36\6\0"+
    "\5\36\3\0\5\36\1\u026f\22\36\25\0\10\36\6\0"+
    "\5\36\3\0\2\36\1\u0270\25\36\25\0\10\36\6\0"+
    "\5\36\3\0\2\36\1\u0271\25\36\25\0\10\36\6\0"+
    "\5\36\3\0\21\36\1\u0272\6\36\25\0\10\36\6\0"+
    "\5\36\3\0\27\36\1\u0273\25\0\10\36\6\0\5\36"+
    "\3\0\20\36\1\u0274\7\36\25\0\10\36\6\0\5\36"+
    "\3\0\4\36\1\u0275\23\36\25\0\10\36\6\0\5\36"+
    "\3\0\23\36\1\u0276\4\36\25\0\10\36\6\0\5\36"+
    "\3\0\23\36\1\u0277\4\36\25\0\10\36\6\0\5\36"+
    "\3\0\14\36\1\u0278\13\36\25\0\10\36\6\0\5\36"+
    "\3\0\1\u0279\27\36\25\0\10\36\6\0\5\36\3\0"+
    "\16\36\1\u027a\11\36\25\0\10\36\6\0\5\36\3\0"+
    "\1\36\1\u027b\26\36\25\0\10\36\6\0\5\36\3\0"+
    "\1\u027c\27\36\25\0\10\36\6\0\5\36\3\0\2\36"+
    "\1\u027d\25\36\25\0\10\36\6\0\5\36\3\0\13\36"+
    "\1\u027e\14\36\25\0\10\36\6\0\5\36\3\0\17\36"+
    "\1\u027f\10\36\25\0\1\36\1\u0280\1\u0281\1\u0282\4\36"+
    "\6\0\5\36\3\0\30\36\25\0\10\36\6\0\5\36"+
    "\3\0\15\36\1\u0283\12\36\25\0\10\36\6\0\5\36"+
    "\3\0\27\36\1\u0284\25\0\10\36\6\0\5\36\3\0"+
    "\1\36\1\u0285\26\36\25\0\10\36\6\0\5\36\3\0"+
    "\5\36\1\u0286\22\36\25\0\10\36\6\0\5\36\3\0"+
    "\22\36\1\u0287\5\36\25\0\10\36\6\0\5\36\3\0"+
    "\13\36\1\u0288\14\36\25\0\10\36\6\0\5\36\3\0"+
    "\4\36\1\u0289\23\36\25\0\10\36\6\0\5\36\3\0"+
    "\4\36\1\u028a\23\36\25\0\10\36\6\0\5\36\3\0"+
    "\4\36\1\u028b\23\36\25\0\10\36\6\0\5\36\3\0"+
    "\20\36\1\u028c\7\36\25\0\10\36\6\0\5\36\3\0"+
    "\1\u028d\27\36\25\0\10\36\6\0\5\36\3\0\11\36"+
    "\1\u028e\16\36\25\0\10\36\6\0\5\36\3\0\5\36"+
    "\1\u028f\22\36\25\0\10\36\6\0\5\36\3\0\1\u0290"+
    "\27\36\25\0\10\36\6\0\5\36\3\0\20\36\1\u0291"+
    "\7\36\25\0\10\36\6\0\5\36\3\0\1\36\1\u0292"+
    "\26\36\25\0\10\36\6\0\5\36\3\0\21\36\1\u0293"+
    "\6\36\25\0\10\36\6\0\5\36\3\0\4\36\1\u0294"+
    "\23\36\25\0\10\36\6\0\5\36\3\0\1\36\1\u0295"+
    "\26\36\25\0\10\36\6\0\5\36\3\0\1\36\1\u0296"+
    "\26\36\25\0\10\36\6\0\5\36\3\0\20\36\1\u0297"+
    "\7\36\25\0\10\36\6\0\5\36\3\0\1\36\1\u0298"+
    "\26\36\25\0\10\36\6\0\5\36\3\0\1\u0299\27\36"+
    "\25\0\10\36\6\0\5\36\3\0\20\36\1\u029a\7\36"+
    "\25\0\10\36\6\0\5\36\3\0\27\36\1\u029b\25\0"+
    "\10\36\6\0\5\36\3\0\20\36\1\u029c\7\36\25\0"+
    "\10\36\6\0\5\36\3\0\14\36\1\u029d\13\36\25\0"+
    "\2\36\1\u029e\5\36\6\0\5\36\3\0\30\36\25\0"+
    "\10\36\6\0\5\36\3\0\20\36\1\u029f\7\36\25\0"+
    "\10\36\6\0\5\36\3\0\1\36\1\u02a0\26\36\25\0"+
    "\10\36\6\0\5\36\3\0\17\36\1\u02a1\10\36\25\0"+
    "\10\36\6\0\5\36\3\0\4\36\1\u02a2\23\36\25\0"+
    "\10\36\6\0\5\36\3\0\1\36\1\u02a3\26\36\25\0"+
    "\10\36\6\0\5\36\3\0\27\36\1\u02a4\25\0\10\36"+
    "\6\0\5\36\3\0\13\36\1\u02a5\14\36\25\0\10\36"+
    "\6\0\5\36\3\0\27\36\1\u02a6\25\0\10\36\6\0"+
    "\5\36\3\0\5\36\1\u02a7\22\36\25\0\10\36\6\0"+
    "\5\36\3\0\4\36\1\u02a8\23\36\25\0\10\36\6\0"+
    "\5\36\3\0\1\u02a9\27\36\25\0\2\36\1\u02aa\5\36"+
    "\6\0\5\36\3\0\30\36\25\0\10\36\6\0\5\36"+
    "\3\0\4\36\1\u02ab\23\36\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[35175];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\5\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\1\11\2\1\1\11\23\1\1\11\1\1\2\11"+
    "\3\1\1\11\4\1\4\11\30\1\10\11\2\0\1\1"+
    "\2\11\3\1\1\11\2\0\1\11\1\0\1\1\3\11"+
    "\1\1\2\11\41\1\2\11\2\0\1\1\1\0\1\1"+
    "\1\0\15\1\1\11\1\1\1\0\1\11\2\0\1\1"+
    "\1\0\1\1\2\11\41\1\1\0\24\1\1\11\1\1"+
    "\1\0\73\1\1\0\106\1\1\11\u0137\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[683];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private static final class State {
    final int state;

    private State(int state) {
      this.state = state;
    }
  }

  protected final Stack<State> myStateStack = new Stack<>();

  private void pushState(int state) {
    myStateStack.push(new State(yystate()));
    yybegin(state);
  }

  private void popState() {
    State state = myStateStack.pop();
    yybegin(state.state);
  }

  public _WgslLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _WgslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 188: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 189: break;
          case 3:
            { return BANG;
            }
          // fall through
          case 190: break;
          case 4:
            { return MODULO;
            }
          // fall through
          case 191: break;
          case 5:
            { return AND;
            }
          // fall through
          case 192: break;
          case 6:
            { return PAREN_LEFT;
            }
          // fall through
          case 193: break;
          case 7:
            { return PAREN_RIGHT;
            }
          // fall through
          case 194: break;
          case 8:
            { return STAR;
            }
          // fall through
          case 195: break;
          case 9:
            { return PLUS;
            }
          // fall through
          case 196: break;
          case 10:
            { return COMMA;
            }
          // fall through
          case 197: break;
          case 11:
            { return MINUS;
            }
          // fall through
          case 198: break;
          case 12:
            { return PERIOD;
            }
          // fall through
          case 199: break;
          case 13:
            { return FORWARD_SLASH;
            }
          // fall through
          case 200: break;
          case 14:
            { return INT_LITERAL;
            }
          // fall through
          case 201: break;
          case 15:
            { return COLON;
            }
          // fall through
          case 202: break;
          case 16:
            { return SEMICOLON;
            }
          // fall through
          case 203: break;
          case 17:
            { return LESS_THAN;
            }
          // fall through
          case 204: break;
          case 18:
            { return EQUAL;
            }
          // fall through
          case 205: break;
          case 19:
            { return GREATER_THAN;
            }
          // fall through
          case 206: break;
          case 20:
            { return AT;
            }
          // fall through
          case 207: break;
          case 21:
            { return IDENT;
            }
          // fall through
          case 208: break;
          case 22:
            { return BRACKET_LEFT;
            }
          // fall through
          case 209: break;
          case 23:
            { return BRACKET_RIGHT;
            }
          // fall through
          case 210: break;
          case 24:
            { return XOR;
            }
          // fall through
          case 211: break;
          case 25:
            { return UNDERSCORE;
            }
          // fall through
          case 212: break;
          case 26:
            { return BRACE_LEFT;
            }
          // fall through
          case 213: break;
          case 27:
            { return OR;
            }
          // fall through
          case 214: break;
          case 28:
            { return BRACE_RIGHT;
            }
          // fall through
          case 215: break;
          case 29:
            { return TILDE;
            }
          // fall through
          case 216: break;
          case 30:
            { popState(); return PAREN_LEFT;
            }
          // fall through
          case 217: break;
          case 31:
            { popState(); return COLON;
            }
          // fall through
          case 218: break;
          case 32:
            { return TYPE_LESS_THAN;
            }
          // fall through
          case 219: break;
          case 33:
            { popState(); return EQUAL;
            }
          // fall through
          case 220: break;
          case 34:
            { popState(); return TYPE_GREATER_THAN;
            }
          // fall through
          case 221: break;
          case 35:
            { return PREPROCESSOR_DECLARATION;
            }
          // fall through
          case 222: break;
          case 36:
            { popState(); return WHITE_SPACE;
            }
          // fall through
          case 223: break;
          case 37:
            { pushState(PREPROCESSOR); return PREPROCESSOR_DECLARATION;
            }
          // fall through
          case 224: break;
          case 38:
            { popState(); return PREPROCESSOR_DECLARATION;
            }
          // fall through
          case 225: break;
          case 39:
            { pushState(PREPROCESSOR_NESTED); return PREPROCESSOR_DECLARATION;
            }
          // fall through
          case 226: break;
          case 40:
            { return NOT_EQUAL;
            }
          // fall through
          case 227: break;
          case 41:
            { return MODULO_EQUAL;
            }
          // fall through
          case 228: break;
          case 42:
            { return AND_AND;
            }
          // fall through
          case 229: break;
          case 43:
            { return AND_EQUAL;
            }
          // fall through
          case 230: break;
          case 44:
            { return TIMES_EQUAL;
            }
          // fall through
          case 231: break;
          case 45:
            { return PLUS_PLUS;
            }
          // fall through
          case 232: break;
          case 46:
            { return PLUS_EQUAL;
            }
          // fall through
          case 233: break;
          case 47:
            { return MINUS_MINUS;
            }
          // fall through
          case 234: break;
          case 48:
            { return MINUS_EQUAL;
            }
          // fall through
          case 235: break;
          case 49:
            { return ARROW;
            }
          // fall through
          case 236: break;
          case 50:
            { return DECIMAL_FLOAT_LITERAL;
            }
          // fall through
          case 237: break;
          case 51:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 238: break;
          case 52:
            { return LINE_COMMENT;
            }
          // fall through
          case 239: break;
          case 53:
            { return DIVISION_EQUAL;
            }
          // fall through
          case 240: break;
          case 54:
            { return UINT_LITERAL;
            }
          // fall through
          case 241: break;
          case 55:
            { return SHIFT_LEFT;
            }
          // fall through
          case 242: break;
          case 56:
            { return LESS_THAN_EQUAL;
            }
          // fall through
          case 243: break;
          case 57:
            { return EQUAL_EQUAL;
            }
          // fall through
          case 244: break;
          case 58:
            { return GREATER_THAN_EQUAL;
            }
          // fall through
          case 245: break;
          case 59:
            { return SHIFT_RIGHT;
            }
          // fall through
          case 246: break;
          case 60:
            { pushState(ATTRIBUTE); return ATTR_LEFT;
            }
          // fall through
          case 247: break;
          case 61:
            { return XOR_EQUAL;
            }
          // fall through
          case 248: break;
          case 62:
            { return FN;
            }
          // fall through
          case 249: break;
          case 63:
            { return IF;
            }
          // fall through
          case 250: break;
          case 64:
            { return OR_EQUAL;
            }
          // fall through
          case 251: break;
          case 65:
            { return OR_OR;
            }
          // fall through
          case 252: break;
          case 66:
            { popState(); return ATTR_RIGHT;
            }
          // fall through
          case 253: break;
          case 67:
            { return SHIFT_LEFT_EQUAL;
            }
          // fall through
          case 254: break;
          case 68:
            { return SHIFT_RIGHT_EQUAL;
            }
          // fall through
          case 255: break;
          case 69:
            { return FLOAT32;
            }
          // fall through
          case 256: break;
          case 70:
            { return FOR;
            }
          // fall through
          case 257: break;
          case 71:
            { return INT32;
            }
          // fall through
          case 258: break;
          case 72:
            { return LET;
            }
          // fall through
          case 259: break;
          case 73:
            { pushState(TYPE_SPEC); return POINTER;
            }
          // fall through
          case 260: break;
          case 74:
            { return UINT32;
            }
          // fall through
          case 261: break;
          case 75:
            { pushState(TYPE_SPEC); return VAR;
            }
          // fall through
          case 262: break;
          case 76:
            { return HEX_FLOAT_LITERAL;
            }
          // fall through
          case 263: break;
          case 77:
            { return BOOL;
            }
          // fall through
          case 264: break;
          case 78:
            { return CASE;
            }
          // fall through
          case 265: break;
          case 79:
            { return ELSE;
            }
          // fall through
          case 266: break;
          case 80:
            { return LOOP;
            }
          // fall through
          case 267: break;
          case 81:
            { return TRUE;
            }
          // fall through
          case 268: break;
          case 82:
            { return TYPE;
            }
          // fall through
          case 269: break;
          case 83:
            { pushState(TYPE_SPEC); return VEC2;
            }
          // fall through
          case 270: break;
          case 84:
            { pushState(TYPE_SPEC); return VEC3;
            }
          // fall through
          case 271: break;
          case 85:
            { pushState(TYPE_SPEC); return VEC4;
            }
          // fall through
          case 272: break;
          case 86:
            { return READ;
            }
          // fall through
          case 273: break;
          case 87:
            { pushState(TYPE_SPEC); return ARRAY;
            }
          // fall through
          case 274: break;
          case 88:
            { return BREAK;
            }
          // fall through
          case 275: break;
          case 89:
            { pushState(TYPE_SPEC); return CONST;
            }
          // fall through
          case 276: break;
          case 90:
            { return FALSE;
            }
          // fall through
          case 277: break;
          case 91:
            { return VEC2F;
            }
          // fall through
          case 278: break;
          case 92:
            { return VEC2H;
            }
          // fall through
          case 279: break;
          case 93:
            { return VEC2I;
            }
          // fall through
          case 280: break;
          case 94:
            { return VEC2U;
            }
          // fall through
          case 281: break;
          case 95:
            { return VEC3F;
            }
          // fall through
          case 282: break;
          case 96:
            { return VEC3H;
            }
          // fall through
          case 283: break;
          case 97:
            { return VEC3I;
            }
          // fall through
          case 284: break;
          case 98:
            { return VEC3U;
            }
          // fall through
          case 285: break;
          case 99:
            { return VEC4F;
            }
          // fall through
          case 286: break;
          case 100:
            { return VEC4H;
            }
          // fall through
          case 287: break;
          case 101:
            { return VEC4I;
            }
          // fall through
          case 288: break;
          case 102:
            { return VEC4U;
            }
          // fall through
          case 289: break;
          case 103:
            { return WHILE;
            }
          // fall through
          case 290: break;
          case 104:
            { return WRITE;
            }
          // fall through
          case 291: break;
          case 105:
            { pushState(TYPE_SPEC); return ATOMIC;
            }
          // fall through
          case 292: break;
          case 106:
            { return ENABLE;
            }
          // fall through
          case 293: break;
          case 107:
            { pushState(TYPE_SPEC); return MAT2X2;
            }
          // fall through
          case 294: break;
          case 108:
            { pushState(TYPE_SPEC); return MAT2X3;
            }
          // fall through
          case 295: break;
          case 109:
            { pushState(TYPE_SPEC); return MAT2X4;
            }
          // fall through
          case 296: break;
          case 110:
            { pushState(TYPE_SPEC); return MAT3X2;
            }
          // fall through
          case 297: break;
          case 111:
            { pushState(TYPE_SPEC); return MAT3X3;
            }
          // fall through
          case 298: break;
          case 112:
            { pushState(TYPE_SPEC); return MAT3X4;
            }
          // fall through
          case 299: break;
          case 113:
            { pushState(TYPE_SPEC); return MAT4X2;
            }
          // fall through
          case 300: break;
          case 114:
            { pushState(TYPE_SPEC); return MAT4X3;
            }
          // fall through
          case 301: break;
          case 115:
            { pushState(TYPE_SPEC); return MAT4X4;
            }
          // fall through
          case 302: break;
          case 116:
            { return RETURN;
            }
          // fall through
          case 303: break;
          case 117:
            { return STRUCT;
            }
          // fall through
          case 304: break;
          case 118:
            { return SWITCH;
            }
          // fall through
          case 305: break;
          case 119:
            { return R8SINT;
            }
          // fall through
          case 306: break;
          case 120:
            { return R8UINT;
            }
          // fall through
          case 307: break;
          case 121:
            { pushState(TYPE_SPEC); return BITCAST;
            }
          // fall through
          case 308: break;
          case 122:
            { return DEFAULT;
            }
          // fall through
          case 309: break;
          case 123:
            { return DISCARD;
            }
          // fall through
          case 310: break;
          case 124:
            { return SAMPLER;
            }
          // fall through
          case 311: break;
          case 125:
            { return PRIVATE;
            }
          // fall through
          case 312: break;
          case 126:
            { return R16SINT;
            }
          // fall through
          case 313: break;
          case 127:
            { return R16UINT;
            }
          // fall through
          case 314: break;
          case 128:
            { return R32SINT;
            }
          // fall through
          case 315: break;
          case 129:
            { return R32UINT;
            }
          // fall through
          case 316: break;
          case 130:
            { return R8SNORM;
            }
          // fall through
          case 317: break;
          case 131:
            { return R8UNORM;
            }
          // fall through
          case 318: break;
          case 132:
            { return RG8SINT;
            }
          // fall through
          case 319: break;
          case 133:
            { return RG8UINT;
            }
          // fall through
          case 320: break;
          case 134:
            { return STORAGE;
            }
          // fall through
          case 321: break;
          case 135:
            { return UNIFORM;
            }
          // fall through
          case 322: break;
          case 136:
            { return CONTINUE;
            }
          // fall through
          case 323: break;
          case 137:
            { return OVERRIDE;
            }
          // fall through
          case 324: break;
          case 138:
            { return FUNCTION;
            }
          // fall through
          case 325: break;
          case 139:
            { return R16FLOAT;
            }
          // fall through
          case 326: break;
          case 140:
            { return R32FLOAT;
            }
          // fall through
          case 327: break;
          case 141:
            { return RG16SINT;
            }
          // fall through
          case 328: break;
          case 142:
            { return RG16UINT;
            }
          // fall through
          case 329: break;
          case 143:
            { return RG32SINT;
            }
          // fall through
          case 330: break;
          case 144:
            { return RG32UINT;
            }
          // fall through
          case 331: break;
          case 145:
            { return RG8SNORM;
            }
          // fall through
          case 332: break;
          case 146:
            { return RG8UNORM;
            }
          // fall through
          case 333: break;
          case 147:
            { return RG16FLOAT;
            }
          // fall through
          case 334: break;
          case 148:
            { return RG32FLOAT;
            }
          // fall through
          case 335: break;
          case 149:
            { return RGBA8SINT;
            }
          // fall through
          case 336: break;
          case 150:
            { return RGBA8UINT;
            }
          // fall through
          case 337: break;
          case 151:
            { return WORKGROUP;
            }
          // fall through
          case 338: break;
          case 152:
            { return CONTINUING;
            }
          // fall through
          case 339: break;
          case 153:
            { pushState(TYPE_SPEC); return TEXTURE_1D;
            }
          // fall through
          case 340: break;
          case 154:
            { pushState(TYPE_SPEC); return TEXTURE_2D;
            }
          // fall through
          case 341: break;
          case 155:
            { pushState(TYPE_SPEC); return TEXTURE_3D;
            }
          // fall through
          case 342: break;
          case 156:
            { return BGRA8UNORM;
            }
          // fall through
          case 343: break;
          case 157:
            { return READ_WRITE;
            }
          // fall through
          case 344: break;
          case 158:
            { return RGBA16SINT;
            }
          // fall through
          case 345: break;
          case 159:
            { return RGBA16UINT;
            }
          // fall through
          case 346: break;
          case 160:
            { return RGBA32SINT;
            }
          // fall through
          case 347: break;
          case 161:
            { return RGBA32UINT;
            }
          // fall through
          case 348: break;
          case 162:
            { return RGBA8SNORM;
            }
          // fall through
          case 349: break;
          case 163:
            { return RGBA8UNORM;
            }
          // fall through
          case 350: break;
          case 164:
            { return FALLTHROUGH;
            }
          // fall through
          case 351: break;
          case 165:
            { return RGBA16FLOAT;
            }
          // fall through
          case 352: break;
          case 166:
            { return RGBA32FLOAT;
            }
          // fall through
          case 353: break;
          case 167:
            { return STATIC_ASSERT;
            }
          // fall through
          case 354: break;
          case 168:
            { pushState(TYPE_SPEC); return TEXTURE_CUBE;
            }
          // fall through
          case 355: break;
          case 169:
            { return RG11B10FLOAT;
            }
          // fall through
          case 356: break;
          case 170:
            { return RGB10A2UNORM;
            }
          // fall through
          case 357: break;
          case 171:
            { pushState(BIND_SPEC); return BINDING_ARRAY;
            }
          // fall through
          case 358: break;
          case 172:
            { return PUSH_CONSTANT;
            }
          // fall through
          case 359: break;
          case 173:
            { return BGRA8UNORM_SRGB;
            }
          // fall through
          case 360: break;
          case 174:
            { return RGBA8UNORM_SRGB;
            }
          // fall through
          case 361: break;
          case 175:
            { pushState(TYPE_SPEC); return TEXTURE_2D_ARRAY;
            }
          // fall through
          case 362: break;
          case 176:
            { return TEXTURE_DEPTH_2D;
            }
          // fall through
          case 363: break;
          case 177:
            { return SAMPLER_COMPARISON;
            }
          // fall through
          case 364: break;
          case 178:
            { pushState(TYPE_SPEC); return TEXTURE_CUBE_ARRAY;
            }
          // fall through
          case 365: break;
          case 179:
            { return TEXTURE_DEPTH_CUBE;
            }
          // fall through
          case 366: break;
          case 180:
            { pushState(TYPE_SPEC); return TEXTURE_STORAGE_1D;
            }
          // fall through
          case 367: break;
          case 181:
            { pushState(TYPE_SPEC); return TEXTURE_STORAGE_2D;
            }
          // fall through
          case 368: break;
          case 182:
            { pushState(TYPE_SPEC); return TEXTURE_STORAGE_3D;
            }
          // fall through
          case 369: break;
          case 183:
            { return TEXTURE_DEPTH_2D_ARRAY;
            }
          // fall through
          case 370: break;
          case 184:
            { pushState(TYPE_SPEC); return TEXTURE_MULTISAMPLED_2D;
            }
          // fall through
          case 371: break;
          case 185:
            { return TEXTURE_DEPTH_CUBE_ARRAY;
            }
          // fall through
          case 372: break;
          case 186:
            { pushState(TYPE_SPEC); return TEXTURE_STORAGE_2D_ARRAY;
            }
          // fall through
          case 373: break;
          case 187:
            { return TEXTURE_DEPTH_MULTISAMPLED_2D;
            }
          // fall through
          case 374: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
